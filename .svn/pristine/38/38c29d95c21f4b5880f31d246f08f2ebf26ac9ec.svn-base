import { filter, map, findIndex } from 'rxjs/operators';
import { Router } from '@angular/router';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { ApiService } from 'src/app/services/api.service';
import { Component, ElementRef, EventEmitter, HostListener, OnInit, Output, ViewChild } from '@angular/core';
import { UtilService } from 'src/app/services/util.service';
import { AppSettings } from 'src/app/services/AppSettings';
import { Options } from '@angular-slider/ngx-slider';

@Component({
  selector: 'app-candidate',
  templateUrl: './candidate.component.html',
  styleUrls: ['./candidate.component.scss']
})
export class CandidateComponent implements OnInit {
  response: any = [];
  dataPass: any = [];
  jobfilter = false;
  filterdata: any = {};
  candidateFoundStatus: any = "Fetching Candidates..."
  dataPasstoSkillwidgets: any;
  removeSelected: any;
  removeTagvalues: any;
  stateListCA: any;
  stateListIN: any;
  stateListAU: any;
  candidateFilterForm: FormGroup;
  countryList: any = [];
  // candidateSource: any = []
  engagementType: any = []
  status: any = []
  filterApplied: boolean = false
  workAuthorization: any = []
  @ViewChild("lgModal", { static: false }) lgModal;


  constructor(private apiService: ApiService, private router: Router, private a_route: ActivatedRoute, private formBuilder: FormBuilder, private util: UtilService) { }

  ngOnInit(): void {

    this.a_route.queryParams.subscribe((res) => {
      if (res.jobfilter != "undefined" && res.jobfilter != undefined) {
        this.jobfilter = true;
        this.filterdata = res;
      }
    })
    this.filterdata = this.filterdata;
    this.createCandidateFilterForm()
    if (!this.jobfilter) {
      this.getCandidateList('candidates/findCandidates')
    } else if (this.jobfilter) {
      this.getCandidateList('candidates/findCandidateSkills')
    }

    if (Object.keys(this.filterdata).length == 0) {
      this.filterApplied = false
    } else if (Object.keys(this.filterdata).length > 0) {
      this.filterApplied = true
    }
  }

  cancelApplication() {
    this.router.navigate(['jobs'])
  }

  cancelFilterValues() {
    this.lgModal.hide()
    this.resetFilter()
    this.filterOn = false
    this.obj.searchAfterKey = null
    this.getCandidateList("candidates/findCandidates")
  }

  // get child date to display widgets
  getchildData(data) {
    this.dataPasstoSkillwidgets = JSON.parse(data);
  }

  //  user remove after uncheck from widgets
  removeUserfromTag(data) {
    this.removeTagvalues = data;
    this.response.forEach(element => {
      if (element.candidateId == data.candidateId) {
        element.isSelected = false;
      }
    });

    this.dataPasstoSkillwidgets.forEach(element => {
      if (element.candidateId == data.candidateId) {
        element.isSelected = false;
      }
    });
  }

  img: any;
  obj: any = {
    limit: 10,
    searchAfterKey: null,
    userId: localStorage.getItem('userId')
  }

  yearApplied: boolean = false
  onChangeYear(value){
    if(value.value > 0){
      if(!this.yearApplied){
        this.totalFilters = this.totalFilters + 1
      }
      this.yearApplied = true
    }else if(value.value == 0){
      if(this.yearApplied){
        this.totalFilters = this.totalFilters - 1
      }
      this.yearApplied = false
    }

    this.candidateFilterForm.value.totalExperience = value.value
    // value.value
  }

  backdropConfig = {
    backdrop: true,
    ignoreBackdropClick: true,
    keyboard: false
  }


  previousSearchAfterKey1: any;
  throwErrorFlag: boolean = false
  applyFilter() {

    if(this.totalFilters>0 ||
      (this.candidateFilterForm.value.city != null && this.candidateFilterForm.value.city != "") ||
      (this.candidateFilterForm.value.state != null && this.candidateFilterForm.value.state != "") ||
      (this.candidateFilterForm.value.zipcode != null && this.candidateFilterForm.value.zipcode != "") ||
      (this.candidateFilterForm.value.country != null && this.candidateFilterForm.value.country != "") ) {
        this.throwErrorFlag = false
        this.complexFilter = true
        this.candidateFilterForm.value.engagementType = this.engagementType
        this.candidateFilterForm.value.status = this.status
        this.candidateFilterForm.value.workAuthorization = this.workAuthorization
        this.candidateFilterForm.value.userId = localStorage.getItem('userId')
        this.util.startLoader()
        this.apiService.create('candidates/filter', this.candidateFilterForm.value).subscribe(res => {
          if (res.code == '00000' && res.data != null) {
            this.lgModal.hide()
            if (res.data.candidateList.length == 0) {
              this.candidateFoundStatus = "Couldn't find any Candidates for the applied filters."
              this.stopscrollFlag = true
              setTimeout(() => {
                this.util.stopLoader()
              }, 2000);
            } else {
              this.candidateFoundStatus = "Fetching Candidates..."
              setTimeout(() => {
                this.util.stopLoader()
              }, 2000);
              var a: any = [res.data.searchAfterKey[0]]
              this.obj.searchAfterKey = a
              if ((res.data.searchAfterKey[0] != this.previousSearchAfterKey1) || this.obj.searchAfterKey == null) {
                this.previousSearchAfterKey1 = res.data.searchAfterKey[0]
                res.data.candidateList.forEach(ele => {
                  if (ele.user.photo != null) {
                    ele.user.photo = AppSettings.photoUrl + ele.user.photo
                  } else if (ele.user.photo == null) {
                    ele.user.photo = "assets/images/userAvatar.png"
                  }
                  this.response.push(ele)
                })
              } else if (res.data.searchAfterKey[0] == this.previousSearchAfterKey1) {
                res.data.candidateList.forEach(ele => {
                  if (ele.user.photo != null) {
                    ele.user.photo = AppSettings.photoUrl + ele.user.photo
                  } else if (ele.user.photo == null) {
                    ele.user.photo = "assets/images/userAvatar.png"
                  }
                  this.response.push(ele)
                })
                this.stopscrollFlag = true
              }
            }
          } else {
            this.lgModal.hide()
          }
        },err => {
          this.util.stopLoader();

         });
      }else {
        this.throwErrorFlag = true
      }


  }



  onChangeCountry(event) {
    if (event == "US") {
    } else if (event == "AU") {
      const countryCode = event;
      this.stateListAU = [];

      this.apiService
        .query("country/getAllStates?countryCode=" + countryCode)
        .subscribe((res) => {
          this.stateListAU = res;
        }, err => {
          this.util.stopLoader();
        });
    } else if (event == "IN") {
      const countryCode = event;
      this.stateListIN = [];
      this.apiService
        .query("country/getAllStates?countryCode=" + countryCode)
        .subscribe((res) => {
          this.stateListIN = res;
        }, err => {
          this.util.stopLoader();
        });
    } else if (event == "CA") {
      const countryCode = event;
      this.stateListCA = [];

      this.apiService
        .query("country/getAllStates?countryCode=" + countryCode)
        .subscribe((res) => {
          this.stateListCA = res;
        }, err => {
          this.util.stopLoader();
        });
    } else {
    }
  }
  workType: any = []
  chooseJobFilter(event, param, value) {
    // if (value == 'candidateSource') {
    //   if (event.target.checked == true) {
    //     this.candidateSource.push(param)
    //   } else if (event.target.checked == false) {
    //     // this.candidateSource.filter(e => (e != param))
    //     var ind = this.candidateSource.indexOf(param)
    //     this.candidateSource.splice(ind, 1)
    //   }
    // } else
    if (value == 'engagementType') {
      if (event.target.checked == true) {
        this.engagementType.push(param)
      } else if (event.target.checked == false) {
        var ind = this.engagementType.indexOf(param)
        this.engagementType.splice(ind, 1)
      }
    } else if (value == 'status') {
      if (event.target.checked == true) {
        this.status.push(param)
      } else if (event.target.checked == false) {
        var ind = this.status.indexOf(param)
        this.status.splice(ind, 1)
      }
    } else if (value == 'workAuthorization') {
      if (event.target.checked == true) {
        this.workAuthorization.push(param)
      } else if (event.target.checked == false) {
        var ind = this.workAuthorization.indexOf(param)
        this.workAuthorization.splice(ind, 1)
      }
    } else if (value == 'workType') {
      if (event.target.checked == true) {
        if (param == 'remoteWork') {
          this.candidateFilterForm.value.remoteWork = true
        } else if (param == 'relocationRequired') {
          this.candidateFilterForm.value.relocationRequired = true
        } else if (param == 'workFromHome') {
          this.candidateFilterForm.value.workFromHome = true
        }
      } else if (event.target.checked == false) {
        if (param == 'remoteWork') {
          this.candidateFilterForm.value.remoteWork = false
        } else if (param == 'relocationRequired') {
          this.candidateFilterForm.value.relocationRequired = false
        } else if (param == 'workFromHome') {
          this.candidateFilterForm.value.workFromHome = false
        }
      }
    }

    if (event.target.checked == true) {
      this.totalFilters = this.totalFilters + 1
    } else if (event.target.checked == false) {
      this.totalFilters = this.totalFilters - 1
    }
  }

  totalFilters: number = 0;


  value: number = 0;
  highValue: number = 0;
  options: Options = {
    floor: 0,
    ceil: 99
  };

  value1: number = 0;
  highValue1: number = 0;
  options1: Options = {
    floor: 0,
    ceil: 99
  };

  decline1() {
    this.lgModal.hide()
  }


  resetFilter() {
    this.totalFilters = 0
    this.CorpToCorp = null
    this.E3Visa = null
    this.W2Contract = null
    this.W2FullTime = null
    this.PartTime = null
    this.Freelance = null
    this.Internship = null
    this.TnVisa = null
    this.GreenCard = null
    this.EadOpt = null
    this.EadL2 = null
    this.EadH4 = null
    this.EadGc = null
    this.EadCpt = null
    this.UsCitizen = null
    this.H1B = null
    this.engagementType = []
    this.status = []
    this.workAuthorization = []
    this.candidateFilterForm.reset()
  }

  filterOn: boolean = false
  openFilter() {
    this.filterOn = true
    this.lgModal.show();
    this.getCountries()
  }

  CorpToCorp
  E3Visa
  W2Contract
  W2FullTime
  PartTime
  Freelance
  Internship
  TnVisa
  GreenCard
  EadOpt
  EadL2
  EadH4
  EadGc
  EadCpt
  UsCitizen
  H1B

  createCandidateFilterForm() {
    this.candidateFilterForm = this.formBuilder.group({
      engagementType: null,
      status: null,
      workAuthorization: null,
      country: null,
      userId: localStorage.getItem('userId'),
      state: null,
      city: null,
      limit: 10,
      searchAfterKey: null,
      zipcode: null,
      relocationRequired: false,
      remoteWork: false,
      workFromHome: false,
      postedInDays: null,
      totalExperience: null,
      experienceFrom: null,
      // workType: null,
      experienceTo: null,
      // myCandidates: false,
      // teamCandidates: false,
      // benchSalesNetwork: false,
      // featuredCandidates: false,
      // suggestedCandidates: false,
      // other: false,
      // otherValue: null,
    })
  }

  onKeyZip(event: any) {
    let data: any = {};
    data.countryCode = "US";
    data.zipCode = event.target.value;
    data.stateCode = "";
    if (data.zipCode.length === 5) {
      this.apiService.create("country/geodetails", data).subscribe((res) => {
        if (
          res &&
          res != null &&
          res != "" &&
          res.length > 0 &&
          event.target.value != ""
        ) {
          res.forEach((ele) => {
            let cityName = ele.cityName;
            let stateName = ele.stateName;
            this.candidateFilterForm.patchValue({
              city: cityName,
              state: stateName,
            });
          });
        }
      },err => {
        this.util.stopLoader();
      });
    } else if (data.zipCode.length < 5 || data.zipCode.length > 5) {
      // this.filter.patchValue({
      //   // city: null,
      //   // state: null,
      // });
    }
  }

  getCountries() {
    this.countryList = [];
    this.util.startLoader();
    this.apiService.query("country/getAllCountries").subscribe((res) => {
      this.util.stopLoader();
      res.forEach((ele) => {
        this.countryList.push(ele);
      });
    }, err => {
      this.util.stopLoader();
    });
  }

  previousSearchAfterKey = null;
  getCandidateList(path) {
    if (this.jobfilter && !this.complexFilter) {
      this.obj.primarySkills = this.filterdata.primarySkills;
      this.obj.jobId = this.filterdata.jobId
    }
    this.util.startLoader()
    this.apiService.create(path, this.obj).subscribe((res) => {
      this.util.stopLoader()
      if (res.code == "00000" && res.data != null && res.data.searchAfterKey) {
        if (res.data.candidateList.length == 0) {
          this.stopscrollFlag = true
          this.candidateFoundStatus = "Couldn't find any Candidates."
        }
        var a: any = [res.data.searchAfterKey[0]]
        this.obj.searchAfterKey = a
        if ((res.data.searchAfterKey[0] != this.previousSearchAfterKey) || this.obj.searchAfterKey == null) {
          this.previousSearchAfterKey = res.data.searchAfterKey[0]
          res.data.candidateList.forEach(ele => {
            if (ele.user.photo != null) {
              ele.user.photo = AppSettings.photoUrl + ele.user.photo
            } else if (ele.user.photo == null) {
              ele.user.photo = "assets/images/userAvatar.png"
            }
            this.response.push(ele);

            this.response = this.response.filter((obj,pos,arr)=>{
              return arr.map(mapobj=> mapobj.candidateId).indexOf(obj.candidateId)==pos;
            })

          })
        } else if (res.data.searchAfterKey[0] == this.previousSearchAfterKey) {
          res.data.candidateList.forEach(ele => {
            if (ele.user.photo != null) {
              ele.user.photo = AppSettings.photoUrl + ele.user.photo
            } else if (ele.user.photo == null) {
              ele.user.photo = "assets/images/userAvatar.png"
            }
            this.response.push(ele)
            this.response = this.response.filter((obj,pos,arr)=>{
              return arr.map(mapobj=> mapobj.candidateId).indexOf(obj.candidateId)==pos;
            })
          })
          this.stopscrollFlag = true
        }
      } else if (res.code == "00000" && res.data != null && res.data.candidateList.length == 0) {
        this.stopscrollFlag = true
        this.candidateFoundStatus = "Couldn't find any Candidates."
      }
      if (res.status == 500) {
        this.util.stopLoader()
      }
    },err => {
      this.util.stopLoader();
     });
  }

  stopscrollFlag: boolean = false
  count: number = 0
  complexFilter: boolean = false
  onScrollDown() {
    if (this.stopscrollFlag == false) {
      if (this.count == 2) {
        setTimeout(() => {
          if (!this.jobfilter && !this.complexFilter && !this.filterOn) {
            this.getCandidateList('candidates/findCandidates')
          } else if (this.jobfilter && !this.complexFilter && !this.filterOn) {
            this.getCandidateList('candidates/findCandidateSkills')
          } else if (this.complexFilter && !this.filterOn) {
            this.applyFilter()
          }
        }, 500);
      } else {
        if (!this.jobfilter && !this.complexFilter && !this.filterOn) {
          this.getCandidateList('candidates/findCandidates')
        } else if (this.jobfilter && !this.complexFilter && !this.filterOn) {
          this.getCandidateList('candidates/findCandidateSkills')
        } else if (this.complexFilter && !this.filterOn) {
          this.applyFilter()
        }
      }
    }
  }

  @ViewChild("widgetsticky", { static: false }) menuElement: ElementRef;
  widgetstick: boolean = false
  @HostListener("window:scroll")
  handleScroll() {
    const windowScroll = window.pageYOffset;
    if (windowScroll >= 35) {
      this.widgetstick = true;
    } else {
      this.widgetstick = false;
    }
  }

}

