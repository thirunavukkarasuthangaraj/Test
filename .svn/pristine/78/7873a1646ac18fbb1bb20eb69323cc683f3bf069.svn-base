import { SearchData } from 'src/app/services/searchData';
import { AppSettings } from './../../../services/AppSettings';
import { Router } from '@angular/router';
import { Component, Input, OnInit } from '@angular/core';
import { NetworkUser } from 'src/app/types/NetworkUser';
import Swal from 'sweetalert2';
import { ApiService } from 'src/app/services/api.service';
import { NetworkComponent } from 'src/app/page/homepage/network/network.component';
import { UtilService } from 'src/app/services/util.service';

@Component({
  selector: 'app-network-card',
  templateUrl: './network-card.component.html',
  styleUrls: ['./network-card.component.scss']
})
export class NetworkCardComponent implements OnInit {

  @Input()
  userDataInput: NetworkUser;
  userId:any=localStorage.getItem('userId')


  constructor( private router: Router,
     private searchDatas: SearchData,
     private api: ApiService,
     private util: UtilService,
    private netCls: NetworkComponent) {

     }

  ngOnInit() {

     if(this.userDataInput.members){
      this.userDataInput.members.forEach(element => {

        if (element.photo != null) {
          element.image =""
          element.image = AppSettings.photoUrl + element.photo;
         } else {
          element.image=""
          element.image = "assets/images/userAvatar.png";
        }
       });
     }

}

activate(value){
  this.util.startLoader()
  this.api.create("network/activate/" + value.networkId, null)
            .subscribe((res) => {
              if (res.code === "00000") {
                this.util.stopLoader()
                // this.router.navigate(["landingPage/network"]);
                Swal.fire({
                  position: "center",
                  icon: "success",
                  title: "Network activated successfully",
                  showConfirmButton: false,
                  timer: 3000,
                }).then((result) => {
                  var values: any = {}
                  values.boolean = true
                  this.searchDatas.setBooleanValue(values)
                });
              }else{
                this.util.stopLoader()
                Swal.fire({
                  position: "center",
                  icon: "info",
                  title: "Oops..",
                  text: "Something went wrong. Please, try again later.",
                  showConfirmButton: false,
                   timer: 1500,
                })
              }
            },err => {
              this.util.stopLoader();
            });
}

reject(dataInput) {
  var usId = localStorage.getItem("userId");
  var obj: any = {};
  obj.memberUserId = usId;
  obj.networkId = dataInput.networkId;
  obj.status = "REJECT";
  this.util.startLoader();
   this.api.create("network/reject/invite", obj).subscribe((res) => {
    this.util.stopLoader();
    if (res.code == "00000") {
      Swal.fire({
        position: "center",
        icon: "success",
        title: "Invitation rejected",
        showConfirmButton: false,
        timer: 1500,
      });
      this.netCls.ngOnInit();
    }
  },err => {
    this.util.stopLoader();
    if(err.status==500){
    this.util.stopLoader();
    Swal.fire({
      icon: "error",
      title: "Oops...",
      text: 'Something went wrong while processing your request. Please, try again later.',
      showDenyButton: false,
      confirmButtonText: `ok`,
    })
  }
});
}

deletenet(value, param) {
  if (param == "delete") {
    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: "btn btn-success",
        cancelButton: "btn btn-danger",
      },
      buttonsStyling: false,
    });

    swalWithBootstrapButtons
      .fire({
        title: "Are you sure you want to deactivate?",
        text: "You will still be able to retrieve the network if you change your mind.",
        icon: "info",
        showCancelButton: true,
        confirmButtonText: "Yes",
        cancelButtonText: "No",
        reverseButtons: true,
      })
      .then((result) => {
        if (result.isConfirmed) {
          this.util.startLoader()
          this.api
            .delete("network/delete/" + value.networkId)
            .subscribe((res) => {
              // console.log('network/delete/', res)
              if (res.code === "00000") {
                this.util.stopLoader()
                this.router.navigate(["landingPage/network"]);
                Swal.fire({
                  position: "center",
                  icon: "success",
                  title: "Network deactivated successfully.",
                  // showConfirmButton: true,
                  showConfirmButton: false,
                  timer: 3000,
                }).then((result) => {
                  var values: any = {}
                  values.boolean = true
                  this.searchDatas.setBooleanValue(values)
                });
              }else{
                this.util.stopLoader()
                Swal.fire({
                  position: "center",
                  icon: "info",
                  title: "Oops..",
                  text: "Something went wron. Please, try again later.",
                  showConfirmButton: false,
                   timer: 1500,
                })
              }
            },err => {
              this.util.stopLoader();
            });
        } else if (result.dismiss === Swal.DismissReason.cancel) {
          // Swal.fire({
          //   position: "center",
          //   icon: "success",
          //   title: "Network is safe",
          //   // showConfirmButton: true,
          //   showConfirmButton: false,
          //   timer: 1500,
          // });
        }
      });
  } else if (param == "leave") {
    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: "btn btn-success",
        cancelButton: "btn btn-danger",
      },
      buttonsStyling: false,
    });

    swalWithBootstrapButtons
      .fire({
        title: "Are you sure you want to leave this network?",
        text: "You can only become a member in the network again if the admin sends you an inviation to join network.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes",
        cancelButtonText: "No",
        reverseButtons: true,
      })
      .then((result) => {
        if (result.isConfirmed) {
          this.api
            .delete(
              "network/delete/member?status=LEFT&userId=" +
                localStorage.getItem("userId") +
                "&networkId=" +
                value.networkId
            )
            .subscribe((res) => {
              if (res.code == "00000") {
                this.router.navigate(["landingPage/network"]);
                Swal.fire({
                  position: "center",
                  icon: "success",
                  title: "Left successfully ",
                  // showConfirmButton: true,
                  showConfirmButton: false,
                  timer: 1500,
                }).then((result) => {
                  var values: any = {}
                  values.boolean = true
                  this.searchDatas.setBooleanValue(values)
                });
              }
            },err => {
              this.util.stopLoader();
            });
        }
      });
  }
  if (value == "message") {
  }
}


commonVariables: any = {};
mgsBtn(value) {
  const datas: any = {};
  datas.networkId = value.networkId;
  datas.recipientId = value.networkId;
  datas.refererId = value.networkId;

  datas.type = "NETWORK";
  this.api
    .query("message?type=NETWORK&groupId=" + datas.groupId)
    .subscribe((res) => {
      // console.log('Message data :', res)
      this.router.navigate(["message"], { queryParams: datas });
    },err => {
      this.util.stopLoader();
    });
}

accept(dataInput) {
  var usId = localStorage.getItem("userId");
  var obj: any = {};
  obj.memberUserId = usId;
  obj.networkId = dataInput.networkId;
  obj.status = "ACCEPT";
  this.util.startLoader();
  this.api.create("network/accept/member", obj).subscribe((res) => {
    this.util.stopLoader();
    if (res.code == "00000") {
      Swal.fire({
        position: "center",
        icon: "success",
         title: "You have been added to " + dataInput.networkName,
        showConfirmButton: false,
        timer: 3000,
      });
       this.netCls.ngOnInit();
    }
  },err => {
    this.util.stopLoader();
    if(err.status==500){
    this.util.stopLoader();
    Swal.fire({
      icon: "error",
      title: "Oops...",
      text: 'Something went wrong while accepting request. Please, try again later.',
      showDenyButton: false,
      confirmButtonText: `ok`,
    })
  }
});
}

redirectPage(data){
  if(data.status != 'INACTIVE'){
    this.router.navigate(['networkPage/members'], { queryParams: data })
  }
}


  close() { }

  networkdata(data) {
    if (data.status != 'REQUEST_SENT' && data.status != 'INACTIVE') {
      localStorage.setItem('networkId', data.networkId);
      this.searchDatas.setnetpathdata(data);
        data.menu="home";
      data.master="NETWORK";
      this.router.navigate(['networkPage/home'], { queryParams: data })
    }
  }
}
