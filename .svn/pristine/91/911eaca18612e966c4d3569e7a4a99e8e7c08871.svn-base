import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { Router , ActivatedRoute } from '@angular/router';
import { __param } from 'tslib';
import { ApiService } from 'src/app/services/api.service';
import { JsonpInterceptor } from '@angular/common/http';
import { NgxSpinnerService } from 'ngx-spinner';
import { MatDialog,  MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';
import { NgbModal, ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';
import { CustomValidator } from '../Helper/custom-validator';
import { ValueConverter } from '@angular/compiler/src/render3/view/template';
import { MustMatch } from '../Helper/MustMatch';
import { UtilService } from 'src/app/services/util.service';
import { CacheService } from 'src/app/services/cache.service';
import { CookieService } from 'ngx-cookie-service';


@Component({
  selector: 'app-sign-up-page2',
  templateUrl: './sign-up-page2.component.html',
  styleUrls: ['./sign-up-page2.component.scss']
})
export class SignUpPage2Component implements OnInit {
  validation: any ;
  validUser = false;
  resetassflag= true;
  sigupPage: any;
  token: string;
  response: { userType: any; };
  userId: any;
  showForm = false;
  userDetails: any = {};
  Model: false;
  setpassword: FormGroup;
  userTypeForm: FormGroup;
  userData: any;
  username: any;
  passwordShownpwd = true;
  passwordShowncpwd = true;
  error: string;

  oldnewsame:boolean = false;

  pageRes: any = {};
  createLinkRes = false;

  constructor(private fb: FormBuilder,
              private API: ApiService,
              private router: Router ,
              private route: ActivatedRoute,
              private spinner: NgxSpinnerService,
              public dialog: MatDialog,
              private util : UtilService,
              private cookieService: CookieService,
              private cache: CacheService,
              ) { }

  ngOnInit() {

    this.formvalidate();
    this.valuesget();
    this.UtypeForm();

   }

   keyDown(e) {
    var e = window.event || e;
    var key = e.keyCode;
    //space pressed
     if (key == 32) { //space
      e.preventDefault();
     }

  }
//  form validation
   formvalidate(): FormGroup {

    return this.setpassword = this.fb.group({
      email : [null , Validators.required],
      pwd : [ null , Validators.compose(
        [
          Validators.required,
          CustomValidator.patternValidator(/\d/, { hasNumber: true }),
          CustomValidator.patternValidator(/[A-Z]/, { hasCapitalCase: true }),
          CustomValidator.patternValidator(/[a-z]/, { hasSmallCase: true }),
          // CustomValidator.patternValidator(/^[a-zA-Z0-9!@#$%^&*()]+$/  , { hasSpecialCharacters: true }),
          CustomValidator.patternValidator(/[!@#$%^&*()/><?]/  , { hasSpecialCharacters: true }),
          Validators.minLength(8),
          Validators.maxLength(15)
        ]
      )],
      // cpwd: ['', Validators.compose([Validators.required])]
      cpwd: ['', Validators.required]

   },
   {
    // validator: CustomValidator.passwordMatchValidator
    validator: MustMatch('pwd','cpwd'),

    });
 }
// path value get
   valuesget() {
    this.route.queryParams.subscribe((pathvalue) => {
     this.token = pathvalue.jsr;

     ////// console.log(' this.token', this.token)
     ////// console.log(' pathvalue.jsr', pathvalue.jsr)
     ////// console.log('pathvalue.resetPassword ====', pathvalue.resetPassword)
     if (pathvalue.resetPassword === "true") {

       this.resetassflag = false;
     // this.resetassflag = true;


     }


     if ( this.token !== null || this.token !== 'undefined' ) {
      this.MassageValidate();
     }
    });
   }

  get sign2() {
    return this.setpassword.controls;
  }


  sendActivationLink(): void {
    const user = {
      firstName: this.pageRes.firstName,
      lastName: this.pageRes.lastName,
      email: this.pageRes.primaryEmail,
      username: this.pageRes.username,
      tokenFor: this.pageRes.tokenFor,
      userId: this.pageRes.userId
    };
    this.util.startLoader();
    this.API.AuthValidation('user/createtoken', user).subscribe(res => {
      this.util.stopLoader();
      if (res.code === '00000') {
        this.error = '';
        this.createLinkRes = true;
      } else {
        this.createLinkRes = false;
      }
    });
  }

  MassageValidate() {
    const data: any = {};
    data.token = this.token;
    this.util.startLoader();
    this.API.AuthValidation('user/validateToken', data).subscribe(res => {
      this.util.stopLoader();
      this.pageRes = res;
      if (res.code === '00000') {

          this.response = res;
          this.pageRes = res;
          this.userId = res.userId;
          this.username = res.username;
          ////// console.log('userId' + this.userId);
          this.setpassword.controls.email.patchValue(this.username);
          this.showForm = true;
          this.Model = false;
       } else if(res.code === '70002'){
        this.showForm = false;
        this.error="LINK_EXPIRED";

        //show link expired page
       } else if (res.code === '99999') {
        this.error="UNEXPECTED";
        this.showForm = false;

        //show unexpected error page
       } else if(res.code === '70001'){
        this.error="INVALID_LINK";
        this.showForm = false;

        //show invalid link error
       }else{
        this.error="UNEXPECTED";
        this.showForm = false;

         //show unexpected error page
       }
     });
  }

  SetPasswordset() {


      // if (this.setpassword.valid) {
    const data: any = {};
    data.userId = this.userId;
    data.password = this.setpassword.value.pwd;
    this.util.startLoader();
    this.API.create('user/setPassword', data).subscribe(res => {
          this.util.stopLoader();
            ////// console.log('Forgot Password Data for new user : \n' + JSON.stringify(res));

            if (res.code === '00000') {

           // this.usertype();
            this.router.navigate(['PasswordResetConfired']);
          } else if (res.code === '99999') {
            ////// console.log('user id : ' + data.userId);

         }else if(res.code === '91234'){
          this.oldnewsame = true;
        }
      },err => {
        this.util.stopLoader();

       });
    // }
  }

  SetPasswordNewUser() {


    const data: any = {};
    data.userId = this.userId;
    data.password = this.setpassword.value.pwd;
    data.token = this.token;
    this.util.startLoader();
    this.API.create('user/setPassword', data).subscribe(res => {
      ////// console.log('Sign Up Data : ',res);
      this.util.stopLoader();
      if (res.code === '00000') {
        //this.API.stopLoader();

        let data = {username:btoa(this.username), password:btoa(this.setpassword.value.pwd)}
        console.log( data);

        this.util.startLoader();
        this.API.login('home/login', data).subscribe((loginRes) => {
          this.util.stopLoader();
          if (loginRes) {
            if (loginRes.code === '00000') {
              this.userId = loginRes.data.userId;
              localStorage.setItem('userId', this.userId);
              this.cookieService.set('userId', this.userId);
              this.cache.setValue('userId', this.userId);
              this.cookieService.set('sessionID', loginRes.data.sessionId);
              localStorage.setItem('sessionID', loginRes.data.sessionId);
              localStorage.setItem('token', loginRes.data.token);
              document.cookie = 'sessionID=' + loginRes.data.sessionId;
              const data: any = {};
              data.userId = this.userId;
              this.router.navigate(['userDetail'], { queryParams: data });
            }
          }
        });
      } else if (res.code === '99999') {
        // ////// console.log('user id : ' +data.userId)
        /// this.API.stopLoader();
      }else if(res.code === '70001'){
        this.error="INVALID_LINK";
        this.showForm = false;
      }else if(res.code === '91234'){
        this.oldnewsame = true;
      }
    },err => {
      this.util.stopLoader();

     });
  }

  UtypeForm(): FormGroup {
   return this.userTypeForm = this.fb.group({
      usertype: ['' , [Validators.required]]
    });
  }

  get myForm() {
    return this.userTypeForm.get('usertype');
  }

  usertype() {
    ////// console.log(this.response);
    // if (this.userTypeForm.valid){
    this.response.userType = this.userTypeForm.value.usertype;
    ////// console.log('User Type :' + this.response.userType);
    this.util.startLoader();
    this.API.create('user/updateUserType' , this.response).subscribe(res => {
      this.util.stopLoader();
        ////// console.log('Api response' + res);
        this.router.navigate(['userDetail'], {queryParams : res});
      },err => {
        this.util.stopLoader();

       });
    // }
  }

  onReset() {

    this.setpassword.reset();
}

}
