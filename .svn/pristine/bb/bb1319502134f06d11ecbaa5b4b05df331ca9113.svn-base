import { Router } from '@angular/router';
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { ApiService } from 'src/app/services/api.service';
import { AppSettings } from 'src/app/services/AppSettings';
import { UtilService } from 'src/app/services/util.service';

@Component({
  selector: 'app-jobs',
  templateUrl: './job.component.html',
  styleUrls: ['./job.component.scss']
})
export class JobsComponent implements OnInit {
  @Input() passValues: any;
  flag: boolean = false;
  userType:any;
  applyingJob: boolean = false
  checkedList:any=[]
  @Input() applyingCandidate: any;
  @Output() selectedJob:EventEmitter<any> = new EventEmitter()
  // @Input() type:any;
  // @Input() data: any;
  userId= localStorage.getItem('userId');
  @Input() jobsFoundStatus: any;
  constructor(private util: UtilService, private router: Router, private api: ApiService) {

  }
  // img: any;
     ngOnInit(): void {
      // setTimeout(() => {
      //   if(document.getElementById('jingalala') != null){
      //     document.getElementById('jingalala').style.visibility = "visible";
      //   }
      // },5000)

      if(Object.keys(this.applyingCandidate).length==0){
        this.applyingJob = false
      }else if(Object.keys(this.applyingCandidate).length > 0){
        this.applyingJob = true
      }
      this.userType  = localStorage.getItem('userType');
    }

    selectCheckbox() {
      this.passValues.every(function (item: any) {
       return item.isSelected == true;
     });
     this.getCheckedItemList();
   }

   getCheckedItemList() {
    this.checkedList = [];
    for (var i = 0; i < this.passValues.length; i++) {
      if (this.passValues[i].isSelected)
         this.checkedList.push(this.passValues[i]);
    }
    this.checkedList = JSON.stringify(this.checkedList);
    this.selectedJob.emit(this.checkedList);
   }


   ngAfterViewInit(): void {
    //Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.
    //Add 'implements AfterViewInit' to the class.
    // setTimeout(() => {
    //   if(document.getElementById('zerocandidates') != null){
    //     document.getElementById('zerocandidates').style.visibility = "visible";
    //   }

    //   if(document.getElementById('fetching')!=null){
    //     document.getElementById('fetching').style.visibility = "hidden"
    //   }
    // },5000)
  }

  // showOrHide(){
  //   setTimeout(() => {
  //     if(document.getElementById('zerocandidates') != null){
  //       document.getElementById('zerocandidates').style.visibility = "visible";
  //     }

  //     if(document.getElementById('fetching')!=null){
  //       document.getElementById('fetching').style.visibility = "hidden"
  //     }
  //   },5000)
  // }


  apply(values: any) {
    this.util.startLoader();
    let datas: any = {};
    let routedata: any;
    var temparr = [];
    var datacheck = [{ 'userId': localStorage.getItem('userId')}]
    datas.jobPostedBy = localStorage.getItem('userId');
    datas.jobId = values.jobId;
    datas.appliedBy=datacheck
    // this.api.updatePut("jobs/updateJobApplied", datas).subscribe((res) => {
    //   this.util.stopLoader();
    //   this.passValues.isApplied = res.data.jobData.isApplied;
    //   // values.jobDescription = values
    //   // values.jobId = values
    // }, err => {
    //   this.util.stopLoader();
    // });
    values.jobfilter = true;
    values.filterTitle = 'Select';
    this.router.navigate(["candidates"], { queryParams: values });
  }

  like(values: any) {


    let datas: any = {};
    datas.jobPostedBy = localStorage.getItem('userId');
    datas.jobId = values.jobId;
    this.util.startLoader();
    this.api.updatePut("jobs/updateJobLiked", datas).subscribe((res) => {
      this.passValues.forEach(ele=>{
        if(res.data.jobData.jobId == ele.jobId){
          ele.likesCount = res.data.jobData.likesCount;
          ele.isLiked = true
        }
      })

      this.passValues.isLiked = true;
      this.util.stopLoader();
    }, err => {
      this.util.stopLoader();
    });
  }


  open(values: any) {

    let data: any = {};
    data.jobPostedBy = localStorage.getItem('userId');
    data.jobId = values.jobId;
    this.util.startLoader();
    this.api.updatePut("jobs/updateJobViewed", data).subscribe((res) => {
      // this.data.isLiked=true;
      this.util.stopLoader();
    }, err => {
      this.util.stopLoader();
    });
  }


}
