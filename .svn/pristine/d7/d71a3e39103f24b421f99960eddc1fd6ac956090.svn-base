import { element } from "protractor";
import { Router, ActivatedRoute } from "@angular/router";
import { FormGroup, FormBuilder, FormControl } from "@angular/forms";
import {
  Component,
  OnInit,
  Output,
  EventEmitter,
  AfterViewInit,
  OnDestroy,
} from "@angular/core";
import { ApiService } from "src/app/services/api.service";
import { AppSettings } from "src/app/services/AppSettings";
import { Observable, Subscription } from "rxjs";
import { startWith, map, debounceTime } from "rxjs/operators";
import { CommonValues } from "src/app/services/commonValues";
import { BusinessComponent } from "../bussinesspages/business/business.component";
import { UtilService } from "src/app/services/util.service";
import { PersonalProfileEditComponent } from "../personal-profile-edit/personal-profile-edit.component";
import { ProfilePhoto } from "src/app/services/profilePhoto";
import { CookieService } from "ngx-cookie-service";
import { SearchData } from "src/app/services/searchData";
import Swal from "sweetalert2";
import { ConnectionService } from "ng-connection-service";
// import { SpeedTestService } from "ng-speed-test";

@Component({
  selector: "app-langding-page-nav-bar",
  templateUrl: "./langding-page-nav-bar.component.html",
  styleUrls: ["./langding-page-nav-bar.component.scss"],
})
export class LangdingPageNavBarComponent
  implements OnInit, OnDestroy, AfterViewInit {
  counts;
  notificationdata;
  userId: any;
  img;
  userDetailsLanding: any;
  photoId: any;
  name;
  // tslint:disable-next-line: variable-name
  userDetailsLanding_array = [];
  dynamicArray = [];

  businessDataArray: any = [];
  BuninessPageData;

  serachForm: FormGroup;

  SerachList: Array<String> = [];
  conditionDropdown = [];

  keyword = "firstName";
  item: any;

  dynamicdata;
  userData;
  bunissData;
  CommunityData;
  errorMsg: any;
  BusinessId;
  SearchcArray;
  filteredStreets: Observable<any>;
  businessTitle = "BusinessPage";
  showSearchData = false;
  searchBarShow = false;
  reloadUser = false;
  highLighter: Subscription
  notificationList: any = [];
  callNotification = true;
  unreadUserMsgCount: number = 0;
  notificationcount: number = 0;
  callUnreadMsg: boolean = true;
  value: any = {}
  onHidden(): void {
    // //// console.log('Dropdown is hidden');
  }
  onShown(): void {
    // //// console.log('Dropdown is shown');
  }
  isOpenChange(): void {
    // //// console.log('Dropdown state is changed');
  }
  eventEmitter: Subscription;
  countEmitter: Subscription;
  isConnected = true;
  noInternetConnection: boolean;
  constructor(
    private API: ApiService,
    private fb: FormBuilder,
    private router: Router,
    private _route: ActivatedRoute,
    private connectionService: ConnectionService,
    private commonservice: CommonValues,
    private util: UtilService,
    private profilePhoto: ProfilePhoto,
    private cookieservice: CookieService,
    private searchData: SearchData,
  ) {
    this.connectionService.monitor().subscribe(isConnected => {
      this.isConnected = isConnected;
    })

    this.getUserHeaderCount();
    this.checkUserProfileStatus();
    this.eventEmitter = this.profilePhoto.getPhoto().subscribe((res) => {
      // //// console.log(res)
      this.photoId = res;
      this.img = {
        src: AppSettings.ServerUrl + "download/" + res,
      };
    });
    this.countEmitter = this.searchData.getNotificationCount().subscribe(res => {
      this.unreadUserMsgCount = res.unreadUserMsgCount
    })

    this.highLighter = this.searchData.getHighlighter().subscribe(res=>{
      this.getHighLighter(res)
    })

    this.updatephoto();

  }
  userDetailPage: boolean = false
  pageName: any = null

  a: any;
  b: any;
  ngOnInit() {
    this.userId = localStorage.getItem("userId");
    if(this.b == 'userDetail') {
      this.userDetailPage = true
    }else {
      this.userDetailPage = false
    }

    this.a = this._route.pathFromRoot[0]['_routerState']['snapshot'].url
    this.b = this.a.substr(1,16)
    this.pageName = this.b
    // if(b == 'landingPage'){
    //   this.pageName = 'landing'
    // }else if(b == 'message'){
    //   this.pageName = 'message'
    // }else if(b == 'notification'){
    //   this.pageName = 'notification'
    // }else if(b == 'landingPage/jobs'){
    //   this.pageName = 'jobs'
    // }else if(b == 'landingPage/cand'){
    //   this.pageName = 'candidate'
    // }


    // this.util.startLoader();
    // this.API.query("user/" + this.userId).subscribe((res) => {
    //   if(res){
    //     this.util.stopLoader();
    //     this.userDetailsLanding = res;
    //   }
    //   // this.photoId = res.photo;

    //   // //// console.log('user id navbar====>>>', this.userDetailsLanding);
    //   // //// console.log('this.photoId r====>>>', this.photoId );
    // });

    // this.landingPageUser();
    this.formserchData();
    // this.searchapicall();
    //this.common("");
    //this.notification()
  }

  getHighLighter(value){
    this.pageName = value
  }

  selectMenu(value){
      this.pageName = value
      this.searchData.setHighlighter(value)
  }

  ngOnDestroy(): void {
    this.callNotification = false;
    this.callUnreadMsg = false;
  }

  updatephoto() {
    const userId = localStorage.getItem("userId");
    this.util.startLoader();
    this.API.query("user/" + userId).subscribe((res) => {
      if (res) {
        this.util.stopLoader();
        this.photoId = true;
        this.img = {
          src:
            res.photo !== undefined && res.photo !== null && res.photo !== ""
              ? AppSettings.ServerUrl + "download/" + res.photo
              : "assets/images/userAvatar.png",
        };
      }
    },err => {
      this.util.stopLoader();
    });
  }

  getUnreadMessageUserCount(res: any) {
    this.unreadUserMsgCount = res;
  }

  updatepath(imgpath) {
    this.img = imgpath;
  }

  test(flag) {
    this.reloadUser = flag;
  }

  checkUserProfileStatus(): void {
    const userId = localStorage.getItem("userId");
    this.util.startLoader()
    this.API.query("user/profilestatus/" + userId).subscribe((res) => {
      if (res && res === "PENDING") {
        this.util.stopLoader()
        const data: any = {};
        data.userId = this.userId;
        this.router.navigate(["userDetail"], { queryParams: data });
      }
    },err => {
      this.util.stopLoader();
    });
  }

  getUserHeaderCount(): void {

    const userId = localStorage.getItem("userId");
    // this.util.startLoader()
    this.API.query("user/header/" + userId).subscribe((res) => {
      if (res) {
        // this.util.stopLoader()

        this.unreadUserMsgCount = res.message;
        this.notificationcount = res.notification;
      }
    },err => {
      this.util.stopLoader();
    });
  }


  getnotificationView(): void {
    const userId = localStorage.getItem("userId");
    this.util.startLoader()
    var value: any = {}
    value.userId = this.userId
    value.offset = null
    value.limit = 10

    this.API.create("notification/query", value).subscribe((res) => {
      if (res) {
        this.util.stopLoader()
        this.getNotification(res.data['notifications']);
      }
    },err => {
      this.util.stopLoader();

     });

  }

  ngAfterViewInit(): void {
    var count = 0;

    setInterval(() => {

      if (this.callNotification) {
        const userId = localStorage.getItem("userId");
        if (userId !== undefined && userId !== null && userId !== "" && this.isConnected == true) {
          this.getUserHeaderCount();
        } else {
          // this.onLogoutSuccess();
        }
      }
      if (this.isConnected == false && count == 0) {
        count = 1
        this.util.stopLoader();
        const swalWithBootstrapButtons = Swal.mixin({
          customClass: {
            confirmButton: 'btn btn-primary',
          },
          buttonsStyling: false
        })

        swalWithBootstrapButtons.fire({
          title: 'Oops! No Internet',
          text: "It seems that you are not connected to the internet. Please, connect and try again.",
          icon: 'info',
          showCancelButton: false,
          confirmButtonText: 'OK',
          reverseButtons: false
        })
      }

    }, 15000);




  }

  getNotification(val: any): any {
    if (val) {
      this.notificationList = val;

    }
  }

  getCountNotification(val: any): any {
    let c = 0;
    val.forEach((e: any) => {
      if (!e.read) {
        c += 1;
      }
    });
    return c;
  }

  redirectNotification(item: any): any {
    const userId = localStorage.getItem("userId");
    this.util.startLoader();
    this.API.create("notification/read/" + item["notifyId"], {}).subscribe((res) => {
        if (res) {
          if (res.code === "00000") {
            this.util.stopLoader();
           // this.notificationcount= this.notificationcount  -1;
            this.getUserHeaderCount();
            item["redirectFrom"] = "notification";
            if (item["notifyType"] === "CONNECT_REQUEST_RECEIVED") {
              this.router.navigate(["/personalProfile"], {
                queryParams: { userId: item["notifyEntityId"] },
              });
            }  else if (item["notifyType"] === "POST_LIKED") {
              // this.router.navigate(["/personalProfile"], {
              //   queryParams: { userId: item["notifyEntityId"] },
              // });
            } else if (item["notifyType"] === "POST_COMMENTED") {
              // this.router.navigate(["/personalProfile"], {
              //   queryParams: { userId: item["notifyEntityId"] },
              // });
            }
             else if (item["notifyType"] === "COMMUNITY_USER_INVITE_REQUEST") {
              localStorage.setItem("communityId", item["notifyEntityId"]);
              this.router.navigate(["/community"], {
                queryParams: item["notifyData"],
              });
            }else if (item["notifyType"] === "COMMUNITY_USER_JOINED") {
              localStorage.setItem("communityId", item["notifyEntityId"]);
              this.router.navigate(["/community"], {
                queryParams: item["notifyData"],
              });
            } else if (item["notifyType"] === "REMOVED_FROM_MSG_GRP") {               //
              localStorage.setItem("communityId", item["notifyEntityId"]);
              this.router.navigate(["/message"], {
                queryParams: item["notifyData"],
              });
            } else if (item["notifyType"] === "LEFT_FROM_MSG_GRP") {
              localStorage.setItem("communityId", item["notifyEntityId"]);
              this.router.navigate(["/message"], {
                queryParams: item["notifyData"],
              });
            } else if (item["notifyType"] === "ADDED_TO_MSG_GRP") {
              localStorage.setItem("communityId", item["notifyEntityId"]);
              this.router.navigate(["/message"], {
                queryParams: item["notifyData"],
              });
            }
            // else if (item["notifyType"] === "TEAM_INVITE_CANCELLED") {
            //   localStorage.setItem("communityId", item["notifyEntityId"]);
            //   this.router.navigate(["/landingPage/team"], {
            //     queryParams: item["notifyData"],
            //   });
            // }
             else if (item["notifyType"] === "COMMUNITY_USER_JOIN_REQUEST") {
              localStorage.setItem("communityId", item["notifyEntityId"]);
              this.router.navigate(["/community"], {
                queryParams: item["notifyData"],
              });
            } else if (item["notifyType"] === "COMMUNITY_MEMBER_INVITE_REQUEST") {
              localStorage.setItem("communityId", item["notifyEntityId"]);
              this.router.navigate(["/community"], {
                queryParams: item["notifyData"],
              });
            }
             else if (item["notifyType"] === "JOINED_TEAM") {
              const temp = item["notifyData"];
              temp.routeFrom = "notification";
              this.router.navigate(["landingPage/team"], {
                queryParams: temp,
              });
            }  else if (item["notifyType"] === "TEAMS_REMOVED") {
              this.router.navigate(["landingPage/team"], {
                queryParams: item["notifyData"]
              });
            }  else if (item["notifyType"] === "TEAM_CONNECT_REQUEST_CANCELLED") {
              this.router.navigate(["landingPage/team"], {
                queryParams: item["notifyData"]
              });
            }else if (item["notifyType"] === "CONNECT_REQUEST_CANCELLED") {
              this.router.navigate(["/personalProfile"], {
                queryParams: { userId: item["notifyEntityId"] },
              });
            }else if (item["notifyType"] === "CONNECTION_REMOVED") {
              this.router.navigate(["/personalProfile"], {
                queryParams: { userId: item["notifyEntityId"] },
              });
            }else if (item["notifyType"] === "User_itself_remove_from_teams") {
              this.router.navigate(["teamPage/" + "member"], {
                queryParams: item["notifyData"],
              });
            } else if (item["notifyType"] === "User_itself_remove_from_Network") {
              this.router.navigate(["networkPage/" + "member"], {
                queryParams: item["notifyData"],
              });
            }

            else if (item["notifyType"] === "JOINED_NETWORK" || item["notifyType"] === "NETWORK_INVITE_SENT"  ){
              const temp = item["notifyData"];
              temp.routeFrom = "notification";
              this.router.navigate(["landingPage/network"], {
                queryParams: temp,
              });
            } else if (item["notifyType"] === "Network_Removed"){
              this.router.navigate(["landingPage/network"], {
                queryParams: item["notifyData"],
              });
            } else if (item["notifyType"] === "NETWORK_INVITE_CANCELLED"){
              this.router.navigate(["landingPage/network"], {
                queryParams: item["notifyData"],
              });
            }  else if (item["notifyType"] === "NETWORK_CONNECT_REQUEST_REJECTED"){
              this.router.navigate(["/personalProfile"], {
                queryParams: { userId: item["notifyEntityId"] },
              });
            }else if( item["notifyType"] === "NETWORK_CONNECT_REQUEST_ACCEPTED"){
              this.router.navigate(["landingPage/network"], {
                queryParams: item["notifyData"]
              });
            } else if (
              item["notifyType"] === "BUSINESS_PAGE_FOLLOWER_INVITE_SENT"
            ) {
              // //// console.log("passing thru this");
              localStorage.setItem("businessId", item["notifyEntityId"]);
              this.router.navigate(["/business"], {
                queryParams: item["notifyData"],
              });
            } else if(item["notifyType"] === "BUSINESS_EMPLOYEE_REQUEST_REJECTED"){
            localStorage.setItem("businessId", item["notifyEntityId"]);
              this.router.navigate(["/business"], {
                queryParams: item["notifyData"],
              });
            }else if(item["notifyType"] === "BUSINESS_EMPLOYEE_REQUEST_ACCEPTED"){
              localStorage.setItem("businessId", item["notifyEntityId"]);
                this.router.navigate(["/business"], {
                  queryParams: item["notifyData"],
                });
              }
            else if (
              item["notifyType"] === "BUSINESS_EMPLOYEE_INVITE_REQUEST"
            ) {
              item.notifyData.menu = "requestsReceived"
              localStorage.setItem("businessId", item["notifyEntityId"]);
              this.router.navigate(["/business"], {
                queryParams: item["notifyData"],
              });
            }else if (
              item["notifyType"] === "BUSINESS_EMPLOYEE_INVITE_SENT"
            ) {
              localStorage.setItem("businessId", item["notifyEntityId"]);
              this.router.navigate(["/business"], {
                queryParams: item["notifyData"],
              });
            }
          }

        }
      },err => {
        this.util.stopLoader();

       });

  }

  // searchapicall(){
  //   let searchvalus;

  //   if (this.serachForm.value.serachData == null){
  //     searchvalus = "";
  //     this.common(searchvalus);
  //   }else{
  //     searchvalus = this.serachForm.value.serachData;
  //     this.common(searchvalus);
  //   }

  // }

  // common(searchvalus){
  //   const data = {'search': this.serachForm.value.serachData,
  //   // 'searchContent':'ALL',
  //   'searchContent': 'ALL',
  //   'page': {
  //           'offSet': 0,
  //           'pageCount': 2
  //           }
  //   };

  //   this.API.create('home/profiles/search' , data).subscribe(res => {
  //   this.dynamicdata = res;

  //   this.dynamicArray = [1,2,3];

  //   this.dynamicdata.businessPages.forEach(element => {
  //     element.businessLogo = AppSettings.photoUrl + element.businessLogo;
  //     element.firstName = element.businessName;
  //     element.Title = this.businessTitle;

  //     //this.dynamicArray.push(element);

  //     //// console.log('Dynamic Bunisse with tilte:====>', this.dynamicdata)

  //     //// console.log('this.dynamicdata.businessPages.businessId',this.dynamicdata.businessId)
  //    });

  //   this.dynamicdata.users.forEach(element => {
  //     element.businessLogo = AppSettings.photoUrl + element.photo;

  //    // this.dynamicArray.push(element);
  //    });

  //   this.dynamicdata.communityPages.forEach(element => {
  //     element.businessLogo = AppSettings.photoUrl + element.photo;
  //     element.firstName = element.communityName;
  //     //this.dynamicArray.push(element);
  //    });

  //   // this.BuninessPageData.emit(this.dynamicdata);
  //   //// console.log('All user data & busniess data :=>>', JSON.stringify(this.dynamicArray));
  //   });

  //  }

  redirect(vlue) {
    // //// console.log(vlue);
  }

  // landingPageUser() {
  //   this.util.startLoader();
  //   this.API.queryPassval(
  //     "home/" + this.userId,
  //     this.userDetailsLanding
  //   ).subscribe((res) => {
  //     if(res){
  //     this.util.stopLoader();
  //     this.img = {
  //       src: AppSettings.ServerUrl + "download/" + res.photo,
  //     };

  //     }
  //   });
  // }

  formserchData() {
    this.serachForm = this.fb.group({
      serachData: [""],
    });
  }

  // selectEvent(val) {
  //   //// console.log("vzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzal", val);
  //   this.item = this.dynamicdata.businessPages

  //   //// console.log('item data =>>>>>>:', this.item)

  //   if(this.dynamicdata.businessPages.businessName === this.dynamicdata.firstName) {
  //     this.router.navigate(['business'], {queryParams : this.dynamicdata.businessPages.businessId});
  //  }else if(this.dynamicdata.businessPages.businessName !== this.dynamicdata.firstName){
  //   this.router.navigate(['LandingPage'], {queryParams : val});
  //  };
  // }

  onChangeSearch(val: string) {
    const data = {
      search: this.serachForm.value.serachData,
      // 'searchContent':'ALL',
      searchContent: "ALL",
      loginUserId: localStorage.getItem("userId"),
      page: {
        offSet: 0,
        pageCount: 5,
      },
    };

    if (val != null && this.serachForm.value.serachData != "") {
      // //// console.log('value entered  --> calling api ', this.serachForm.value.serachData);
      this.util.startLoader();
      this.API.create("home/profiles/search", data)
        .pipe(debounceTime(500))
        .subscribe((res) => {
          this.util.stopLoader();

          if(res!=null && res!=null){
            this.dynamicArray = [""];
          this.dynamicdata = res;
          //this.dynamicdata = ''
          if(res.businessPages!="undefined"){
            this.bunissData = res.businessPages;
            this.dynamicdata.businessPages.forEach((element) => {
              if (element.businessLogo != null) {
                element.businessLogo1 =
                  AppSettings.photoUrl + element.businessLogo;
              } else {
                element.businessLogo1 = null;
              }

              // element.firstName = element.businessName;
              // element.Title = this.businessTitle;

              this.dynamicArray.push(element);

              //  //// console.log('Dynamic Bunisse with tilte:====>', this.dynamicdata.businessPages.businessId)
              //  //// console.log('this.dynamicdata.businessPages.businessId', res.businessPages.businessId)
            });
          }
          if(res.users!="undefined"){
            this.userData = res.users;
            this.dynamicdata.users.forEach((element) => {
              if (element.photo != null) {
                element.userImage = AppSettings.photoUrl + element.photo;
              } else {
                element.userImage = null;
              }

              element.UserTitle = "User";
              this.dynamicArray.push(element);

              // //// console.log('user data tittle:=======>',this.dynamicdata.users.UserTitle)
            });

          }
          if(res.communityPages!="undefined"){
            this.CommunityData = res.communityPages;

          this.dynamicdata.communityPages.forEach((element) => {
            if (element.logo != null) {
              element.logo = AppSettings.photoUrl + element.logo;
            } else {
              element.logo = null;
            }

            element.firstName = element.communityName;
            this.dynamicArray.push(element);
          });

          }
          //this.bunissData= ''

          // this.showSearchData = true;




        }
        },err => {
          this.util.stopLoader();

         });

      this.searchBarShow = true;
    } else {
      this.searchBarShow = false;
      this.bunissData = [];
      this.userData = [];
    }
  }

  onFocused(e) {
    // do something when input is focused
  }

  onLogout() {
    var val: any = {}
    val.isLoggedOut = true
    this.searchData.setCommonVariables(val);
    this.util.startLoader();
    this.API.onLogout().subscribe((res) => {
      if (res) {
        if (res.code === "00000") {
          this.util.stopLoader();
          this.updateUserOnlineOrOffline('OFFLINE');
          this.onLogoutSuccess();
        } else {
          this.util.stopLoader();
        }
      }
    });
  }

  updateUserOnlineOrOffline(status: any) {
    let url = 'user/onlineoroffline';
    let user = {
      userId: localStorage.getItem('userId'),
      online: status.toUpperCase()
    };
    this.API.create(url, user).subscribe(res => {
      //// console.log("reload browser", res)
    },err => {
      this.util.stopLoader();

     });
  }

  onLogoutSuccess() {
    this.cookieservice.deleteAll();
    let allCookies = document.cookie.split(";");
    if (allCookies) {
      for (let i = 0; i < allCookies.length; i++) {
        document.cookie =
          allCookies[i] + "=;expires=" + new Date(0).toUTCString();
      }
    }
    localStorage.clear();
    this.router.navigate(["login"]);
  }

  viewMyProfile() {
    // this.router.navigate(['clear']);
    // this.commonservice.redirect({},'personalProfile')
    var data: any = {}
    data.userId = this.userId
    this.router
      .navigateByUrl("/", { skipLocationChange: true })
      .then(() => this.router.navigate(["/personalProfile"], { queryParams: data }));
  }

  goToSecuritySettings() {
    var data: any = {}
    data.userId = this.userId
    data.destination = "securitySettings"
    this.router
      .navigateByUrl("/", { skipLocationChange: true })
      .then(() => this.router.navigate(["/personalProfile"], { queryParams: data }));
  }

  businessSelected(val) {
    // //// console.log('Selected Data', val.businessId)

    if (val.businessId != undefined) {
      localStorage.setItem("businessId", val.businessId);
      var data: any = {};
      data.businessId = val.businessId;
      data.businessName = val.businessName
      this.searchedpage(val.businessId, "BUSINESS");
      //this.router.navigate(['clear']);
      //this.commonservice.redirect(data,'business')
      this.setVisitor(data);
      this.router
        .navigateByUrl("/", { skipLocationChange: true })
        .then(() => this.router.navigate(["/business"], { queryParams: data }));
    } else {

      let newobj: any = {};
      newobj.communityId = val.communityId
      newobj.userId = localStorage.getItem('userId')
      this.API.create("community/home", newobj).subscribe(res => {
        localStorage.setItem("communityId", val.communityId);
        var data: any = {};
        data.communityId = val.communityId;
        data.communityName = val.communityName;
        data.communityType = val.communityType;
        data.isJoined = res.data.communityhome.isJoined;
        data.isAdmin = res.data.communityhome.isAdmin;
        data.isSuperAdmin = res.data.communityhome.isSuperAdmin;

        this.searchedpage(val.communityId, "COMMUNITY");
        // this.router.navigate(['clear']);
        //this.commonservice.redirect(data,'community')
        this.router
          .navigateByUrl("/", { skipLocationChange: true })
          .then(() =>
            this.router.navigate(["/community"], { queryParams: data })
          );
        },err => {
          this.util.stopLoader();

         });

    }

  }

  setVisitor(data) {
    var datum: any = {};
    datum.businessId = data.businessId;
    datum.userId = localStorage.getItem("userId");
    this.util.startLoader()
    this.API.create("business/save/pagevisitor", datum).subscribe((res) => {
      if (res.code == "00000") {
        this.util.stopLoader()
      }
    },err => {
      this.util.stopLoader();

     });

  }

  userSelected(valUser, pageType) {
    this.searchedpage(valUser.userId, "USER");
    var userData: any = {};
    userData.userId = valUser.userId;
    //    this.router.navigate(['personalProfile'], {queryParams : userData})
    this.router
      .navigateByUrl("/", { skipLocationChange: true })
      .then(() =>
        this.router.navigate(["/personalProfile"], { queryParams: userData })
      );
  }

  searchList(data) {
    // //// console.log(data);
    let datas: any = {};
    datas.data = data;
    datas.searchData = this.serachForm.value.serachData;
    //this.searchedpage(data);
    this.router.navigate(["Search-list"], { queryParams: datas });
    // this.router.navigate(['clear']);
    //  this.commonservice.redirect(data,'Search-list')
  }

  searchedpage(userid, pageType) {
    let datas: any = {};
    datas.userId = localStorage.getItem("userId");
    datas.pageId = userid;
    datas.pageType = pageType;
    this.util.startLoader()
    this.API.create("widget/searchedpage", datas).subscribe((res) => {
      if (res) {
        this.util.stopLoader()
      }
    },err => {
      this.util.stopLoader();

     });

  }

  notification() {
    var userid = localStorage.getItem("userId");
    this.util.startLoader();
    this.API.query("notification/" + userid).subscribe((res) => {
      if (res) {

        this.util.stopLoader();
        this.counts = res.length;
        this.notificationdata = res;

        //   res.forEach(element => {
        //     if(element.userId!='undefined'||element.userId!='null'||element.userId!=''){

        //       this.API.userquarybussiness(element.userId).subscribe(res=>{

        //         var  photos
        //         if(res.photo==null){
        //            photos="assets/images/userAvatar.png"
        //         }else if(res.photo!=null){
        //           photos=AppSettings.photoUrl+res.photo
        //         }
        //         this.userData.push({
        //          userName:res.firstName+" "+res.lastName,
        //          photo:photos,
        //          organisation:res.organisation,
        //          title:res.title,
        //          status:element.status,
        //          userId:element.userId,
        //          connected:element.connected,
        //          communityId:element.communityId,

        //          notifyId:res.notifyId,
        //          notifyType:res.notifyType,

        //          notifyEntity:res.notifyEntity,
        //          notifyEntityId:res.notifyEntityId,
        //          notifyTime:res.notifyTime,
        //          read:res.false,

        //          notifyData:res.notifyData,
        //         })
        //    })

        //  }

        // })
      }
    },err => {
      this.util.stopLoader();
    });
  }

  itemclick(data) { }
}
