import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpResponse, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CookieService } from 'ngx-cookie-service';
import { EMPTY, Observable, of, Subscription, throwError } from 'rxjs';
import { map, catchError, tap } from 'rxjs/operators';
import { UtilService } from '../services/util.service';
import swal from 'sweetalert2';
import { SearchData } from '../services/searchData';
import { slice } from 'lodash';

@Injectable()
export class AppHttpInterceptor implements HttpInterceptor {
  eventEmitter: Subscription
  isLoggedOut: boolean = false
  constructor(private _router: Router, private util: UtilService, private searchData: SearchData,
    private cookie: CookieService) {
      //debugger
      this.eventEmitter = this.searchData.getCommonVariables().subscribe(res=>{
        if(res.isLoggedOut == true){
          this.isLoggedOut = true
        }else{
          this.isLoggedOut = false
        }
      })
    document.cookie = 'curl=' + window.location.href;
  }

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    // //// console.log(req.headers.getAll('apiID'))
    document.cookie = 'curl=' + window.location.href;
    //document.cookie = 'userId='+localStorage.getItem('userId');
    var header = {};
    header['curl'] = window.location.href;

    if(localStorage.getItem('userId') != null){
      header['userId'] = localStorage.getItem('userId');
    }

    if(localStorage.getItem('sessionID') != null){
      header['sessionID'] = localStorage.getItem('sessionID');

    }
    if(localStorage.getItem('token') != null){
      header['Authorization'] = `Bearer ${localStorage.getItem('token')}`;
    }



    const cloneReq = req.clone({
      withCredentials: true,
      setHeaders: header
      });

    ////// console.log("new outgoing request",cloneReq);
    return next.handle(cloneReq).pipe(
      tap(evt => {
        if (evt instanceof HttpResponse) {
          //     if(evt.body && evt.body.success)
          //         this.toasterService.success(evt.body.success.message,
          // evt.body.success.title, { positionClass: 'toast-bottom-center' });
        }
      }),
      catchError((err: any) => {
        if (err instanceof HttpErrorResponse) {

          // console.log(err)

          if (err && err.error) {
            var notification = err.url.slice(-18)
            if (err.error.code === 'INVALID_SESSION') {
                if(this.isLoggedOut == true){
                  this.cookie.deleteAll();
                  let allCookies = document.cookie.split(';');
                  if (allCookies) {
                    for (let i = 0; i < allCookies.length; i++) {
                      document.cookie = allCookies[i] + "=;expires="
                        + new Date(0).toUTCString();
                    }
                  }
                  localStorage.clear();
                  this._router.navigate(['/login']);
                  this.util.stopLoader();
                  swal.close();
                  return EMPTY;

                } else if(this.isLoggedOut == false && swal.isVisible() == false){  //swal.isVisible() == false -> to not show alert when it is already shown
                  swal.fire({
                    icon: "info",
                    title: "Invalid session",
                    text: "Sorry, your session has expired. We are routing you to login page.",
                    showConfirmButton: false,
                    timer: 3000,
                  }).then(()=>{
                    this.cookie.deleteAll();
                    let allCookies = document.cookie.split(';');
                    if (allCookies) {
                      for (let i = 0; i < allCookies.length; i++) {
                        document.cookie = allCookies[i] + "=;expires="
                          + new Date(0).toUTCString();
                      }
                    }
                    localStorage.clear();
                    this._router.navigate(['/login']);
                    this.util.stopLoader();
                    swal.close();
                    return EMPTY;
                  });
                }
              // if(this.route.pathFromRoot[0]['_routerState']['snapshot'].url !== '/login'){
                // //// console.log("this.route.pathFromRoot[0]['_routerState']['snapshot'].url")
                // //// console.log(this.route.pathFromRoot[0]['_routerState']['snapshot'].url)

              // }
            } else if(notification === "notification/query" && err.status === 500){
              this.util.stopLoader()
            } else if(err.status === 500){
              // this.util.stopLoader()
              return throwError(err)
            } else if(err.status === 0){
              this.util.stopLoader()
              return throwError(err)
            }else if(err.status !== 200){
                this.util.stopLoader()
              return throwError(err)
            }




            // //// console.log(this.route.pathFromRoot[0]['_routerState']['snapshot'].url)
            // //// console.log("this.route.parent.snapshot.url")
            // else if(err.status != 200){
            //   this.util.stopLoader();
            //   // swal.fire({
            //   //   title: '<strong>ERROR Reports</strong>',
            //   //   icon: 'error',
            //   //   text: err.statusText,
            //   //   focusConfirm: true,
            //   //   confirmButtonText: 'Ok',
            //   //   confirmButtonAriaLabel: 'Ok',
            //   // });

            //   swal.fire({
            //     icon: "error",
            //     title: "ERROR Reports",
            //     showConfirmButton: true,
            //     timer: 1500,
            //   });


            // }
          }
        }
        return of(err);
      }));
  }

}
