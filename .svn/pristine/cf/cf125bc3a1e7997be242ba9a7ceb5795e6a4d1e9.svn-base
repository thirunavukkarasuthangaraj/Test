import { Component, ElementRef, HostListener, OnInit, ViewChild } from '@angular/core';
import { ApiService } from 'src/app/services/api.service';
import { UtilService } from 'src/app/services/util.service';
import { UserCardConfig } from 'src/app/types/UserCardConfig';

@Component({
  selector: 'app-connection',
  templateUrl: './connection.component.html',
  styleUrls: ['./connection.component.scss']
})
export class ConnectionComponent implements OnInit {

  connectionData:any = "CONNECTED"
  //cconnectionListData:any;
  connectionlistuserdata:any;
 // recivedListUserData:any;
  //InvitationListUserData:any;
  listConnection:any;
  noDatafound="You have no Connections yet"
  showNoDatafound : boolean = false;
  @ViewChild('landingside1', {static: false}) menuElement: ElementRef;
  landingsidesticky1: boolean = false;
  landingsidesticky2: boolean = false;
  elementPosition: any;
  allData:boolean = true;
  recivedData:boolean = false;
  InvitationData:boolean = false;
  btnnameshow:any;
  connectallshow:boolean = false;
  allConnectallshow:boolean = false;
  Requestshow:boolean = false
  Invitationsshow:boolean = false;
  connect:boolean = true;
  allConnect:boolean = true;
  requestsent:boolean = false;
  requestrecived:boolean = false;
  userCardConfig: UserCardConfig[] = []
  Search="";
  status="all";
  filterame;
  count: String = "";
  searchKey
  constructor(
     private util: UtilService,
    private api: ApiService,) { }

  ngOnInit() {
    window.scrollTo(0, 0);
     this.apicall(this.status);
     //this.recivedConnection();
     //this.Invitation_Sent();
  }
  @HostListener('window:scroll')
  handleScroll() {
    const windowScroll = window.pageYOffset;
    if (windowScroll >= 24) {
      this.landingsidesticky1 = true;
      this.landingsidesticky2 = true;
    } else {
      this.landingsidesticky1 = false;
      this.landingsidesticky2 = false;
    }
  }

  onsearch(val){
     this.Search=val;
     this.apicall(this.status);
  }
  keyupdata(event){
    if(event.target.value.length==0){
      this.Search=""
      this.apicall(this.status);
    }
  }
  apicall(filter){
     this.status=filter;
     if(this.status  === 'CONNECTED'){
       this.btnnameshow ='Active Connections'
       this.connectallshow = false;
       this.Requestshow = true;
       this.Invitationsshow = true;
       this.connect=true;
       this.requestsent  = false;
       this.requestrecived = false;
       this.allConnect=false;
       this.allConnectallshow=false;
      }else if(this.status  === 'Invitation_Received'){
      this.btnnameshow ='Requests Received'
      this.connectallshow = true;
      this.Requestshow = false;
      this.Invitationsshow = true;
      this.connect=false;
      this.requestsent  = false;
      this.requestrecived = true;
      this.allConnect=false;
      this.allConnectallshow=false;
     }else if(this.status  === 'Invitation_Sent'){
      this.btnnameshow ='Requests Sent'
      this.connectallshow = true;
      this.Requestshow = true;
      this.Invitationsshow = false;
      this.allConnect=false;
      this.connect=false;
      this.requestsent  = true;
      this.requestrecived = false;
      this.allConnectallshow=false;
     }else if(this.status  === 'all'){
      this.btnnameshow ='All'
      this.allConnect=true;
      this.connect=false;
      this.requestsent=false;
      this.requestrecived=false;
      this.allConnectallshow=true;
     }
     let datas: any = {};
     datas.status =this.status;
    if( this.Search!=null && this.Search!=undefined){
      datas.searchText = this.Search;
    }
    datas.userId = localStorage.getItem('userId');
    this.count = "";
    this.util.startLoader();
    this.api.create("user/connection/info", datas).subscribe(res => {
      this.util.stopLoader();
      let data = res.data.response;
     data.forEach(element => {
      element.userName=element.firstName+" "+element.lastName;
       if(filter === "CONNECTED"){
        element.connectionStatus="CONNECTED";
        element.page="connectionList";
       }else if(filter === "Invitation_Sent"){
        element.page="connectionList";
        element.connectionStatus="REQUEST_SENT";
       }else if(filter === "Invitation_Received"){
        element.page="connectionList";
        element.connectionStatus="REQUEST_PENDING";
      } else if(filter === "all"){
        if(element.connectionStatus === "CONNECTED"){
        element.page="connectionList";
        element.connectionStatus="CONNECTED";
         }else if(element.connectionStatus  === "REQUEST_SENT"){
        element.page="connectionList";
        element.connectionStatus="REQUEST_SENT";
         }else if(element.connectionStatus  === "REQUEST_PENDING"){
        element.page="connectionList";
        element.connectionStatus="REQUEST_PENDING";
        }
      }
     });
   
     this.connectionlistuserdata = data;
     this.count=this.connectionlistuserdata.length;
     if(this.connectionlistuserdata.length == 0){
      this.showNoDatafound = true;
    }else{
      this.showNoDatafound = false;
    }
     //this.allData = true;
     //this.recivedData = false;
     //this.InvitationData = false;
    },err => {
      this.util.stopLoader(); 
       
     });
  }

  dynamicSort(property) {
    var sortOrder = 1;
     if(property[0] === "-") {
        sortOrder = -1;
        property = property.substr(1);
    }
     return function (a,b) {
        if(sortOrder == -1){
            return b[property].localeCompare(a[property]);
        }else{
            return a[property].localeCompare(b[property]);
        }
    }
}



  recivedConnection(){
    let recived = " Invitation_Received "
    let datas: any = {};
    datas.status =recived;
    datas.userId = localStorage.getItem('userId');
    this.api.create("user/connection/info", datas).subscribe(res => {
    res.data.response.forEach(element => {
      element.userName=element.firstName+" "+element.lastName;
    });
     // //// console.log('Recived Connected Data List',res);
     this.connectionlistuserdata = res.data.response;
     this.allData = false;
     this.recivedData = true;
     this.InvitationData = false;
    });
  }

  Invitation_Sent(){
    let Invitation = " Invitation_Sent"
    let datas: any = {};
    datas.status =Invitation;
    datas.userId = localStorage.getItem('userId');
    this.api.create("user/connection/info", datas).subscribe(res => {
     // //// console.log('Invitation Connected Data List',res);
     res.data.response.forEach(element => {
      element.userName=element.firstName+" "+element.lastName;
     });
     this.connectionlistuserdata = res.data.response;
     this.allData = false;
     this.recivedData = false;
     this.InvitationData = true;
    });
  }

  ngAfterViewInit(){
    window.scrollTo(0, 0);
    //this.elementPosition = this.menuElement.nativeElement.offsetTop;
   // // //// console.log(this.elementPosition);
  }
 

    handleUserCardEvent(data: any) : void{
        //// console.log(data.event);
      //// console.log('userid - ' + data.data.userId);
      if(data.event != undefined && data.event != null && data.event != 'ACCEPTCONNECT'){
         this.connectionlistuserdata = this.connectionlistuserdata.filter(element => element.userId != data.data.userId);
       }else if(data.event == 'ACCEPTCONNECT' && this.status=='Invitation_Received'){
        this.connectionlistuserdata = this.connectionlistuserdata.filter(element => element.userId != data.data.userId);
      }else if(data.event == 'REJECTEDCONNECT'){
        this.connectionlistuserdata = this.connectionlistuserdata.filter(element => element.userId != data.data.userId);
      }
    }
}
