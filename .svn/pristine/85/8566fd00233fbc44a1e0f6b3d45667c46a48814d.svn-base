import { ActivatedRoute, Router } from "@angular/router";
import { NgxSpinnerService } from "ngx-spinner";
import { ApiService } from "src/app/services/api.service";
import { AfterViewInit, Component, OnInit } from "@angular/core";
import { FormGroup, FormBuilder, Validators } from "@angular/forms";
import { CookieService } from "ngx-cookie-service";
import { CacheService } from "src/app/services/cache.service";
import { MessageService } from "../../services/message.service";
import { UtilService } from "src/app/services/util.service";
import swal from "sweetalert2";
import { BsModalRef, BsModalService } from "ngx-bootstrap/modal";
import { SearchData } from "src/app/services/searchData";

@Component({
  selector: "app-login",
  templateUrl: "./login.component.html",
  styleUrls: ["./login.component.scss"],
})
export class LoginComponent implements OnInit, AfterViewInit {
  loginForm: FormGroup;
  submitted: false;
  userId: any;
  cookieValue: any;
  passwordShown = true;
  passwordShown1 = false;
  modalRef: BsModalRef
  errorMsg = false;
  errorMsgTxt = "";
  queryErr = false;

  inviteDisable = false;

  formComplete;
  redirectTo = null;

  constructor(
    private fb: FormBuilder,
    private API: ApiService,
    private spinner: NgxSpinnerService,
    private router: Router,
    private util: UtilService,
    private route: ActivatedRoute,
    private cookieService: CookieService,
    private cache: CacheService,
    public message: MessageService,
    private modalService: BsModalService,
    private searchData: SearchData,

  ) { }

  ngOnInit() {
    this.checkQueryParams();
    this.message.success("Login component");
    this.loginForm = this.fb.group({
      username: ["", [Validators.required, Validators.email]],
      password: ["", Validators.required],
    });

    this.API.handleErrorOld();
    // window.scrollTo(0, 0);

  }

  ngAfterViewInit(): void {
    this.util.stopLoader();
    setTimeout(function () {
      window.scrollTo(0, 0);
      // if(this.modalService!=undefined){
      // this.modalRef.hide()
      // this.modalService.
      // }
    }, 500);
    this.modalService.hide(1);
    this.modalService.hide(2);
  }

  checkQueryParams(): void {
    this.route.queryParams.subscribe((res: any) => {
      if (res) {
        if (res.ruser && res.ruser === "1") {
          this.queryErr = true;
        }
        if (res.redirectTo && res.redirectTo != '') {
          //// console.log("redirectTo - " + res.redirectTo);
          this.redirectTo = res.redirectTo;
        }
      }
    });
  }

  get l() {
    return this.loginForm.controls;
  }

  loginform() {
    this.queryErr = false;
    this.inviteDisable = true;
    this.util.startLoader();
    let data = { username: btoa(this.loginForm.value.username), password: btoa(this.loginForm.value.password) }
    console.log(data)


    this.API.login("home/login", data).subscribe((res) => {
      this.util.stopLoader();
      if (res.code === "00000") {
        if (res.data && res.data.ACTIVE_SESSION) {
          swal.fire({
            title: "Multiple Logins Detected",
            text: "More than one login detected for the same user. As a security measure, we are closing the previous session.",
            focusConfirm: false,
            confirmButtonText: "Ok",
            confirmButtonAriaLabel: "Ok",
          });
        }
        this.userId = res.data.userId;
        localStorage.setItem("userId", this.userId);
        this.cookieValue = this.cookieService.set("userId", this.userId);
        this.cookieService.set("userId", this.userId);
        this.cookieService.set("sessionID", res.data.sessionId);
        localStorage.setItem("sessionID", res.data.sessionId);
        localStorage.setItem('token', res.data.token)
        localStorage.setItem('userType', res.data.userType)
        document.cookie = "userId=" + this.userId;
        document.cookie = "sessionID=" + res.data.sessionId;
        this.cache.setValue("userId", this.userId);
        this.inviteDisable = false;
        this.message.success("Login successfully");
        if (res.data.profileStatus === "INCOMPLETED") {
          const data: any = {};
          data.userId = this.userId;
          this.router.navigate(["userDetail"], { queryParams: data });
        } else if (
          res.data.profileStatus ||
          res.data.profileStatus == null ||
          res.data.profileStatus === "COMPLETED"
        ) {
          if (this.redirectTo != undefined && this.redirectTo != null && this.redirectTo != '') {
            this.router.navigateByUrl(this.redirectTo);
          } else {
            this.router.navigate(["landingPage"]);
          }
          var val: any = {}
          val.isLoggedOut = false
          this.searchData.setCommonVariables(val)
        }
      } else if (res.code === "99999") {
        this.inviteDisable = false;
        this.errorMsg = true;
        this.errorMsgTxt = "Please enter valid email address and password";


        // already data clear

        this.cookieService.deleteAll();
        let allCookies = document.cookie.split(";");
        if (allCookies) {
          for (let i = 0; i < allCookies.length; i++) {
            document.cookie =
              allCookies[i] + "=;expires=" + new Date(0).toUTCString();
          }
        }
        localStorage.clear();

      }
    }, err => {
      console.log(err)
      this.util.stopLoader();
    });
  }
}
