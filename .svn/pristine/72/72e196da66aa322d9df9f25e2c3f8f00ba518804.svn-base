import { UtilService } from './../../../services/util.service';
import { Component, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, ViewChild } from '@angular/core';
import { ApiService } from 'src/app/services/api.service';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-suggestions-menu',
  templateUrl: './suggestions-menu.component.html',
  styleUrls: ['./suggestions-menu.component.scss']
})
export class SuggestionsMenuComponent implements OnInit {
   divHeight
  //Dev Code
  @ViewChild('landingside1', {static: false}) menuElement: ElementRef;
  @ViewChild('landingside2', {static: false}) menuElement1: ElementRef;
  @Input() page: any;


   landingsidesticky1: boolean = false;
   landingsidesticky2: boolean = false;
   csshide:Boolean=false
   elementPosition: any;
   WidgetList:any=[];
   userId:any = localStorage.getItem('userId');
   pathData:any;
   selectedmenu:any;


  constructor(private api: ApiService,  private route: ActivatedRoute , private util:UtilService) { }

  ngOnInit() {
     window.scrollTo(0, 0);
    this.route.queryParams.subscribe((res) => {
      this.page= res.master;
      this.pathData=res;
      // console.log("this.pathData")
      // console.log(this.pathData)
      this.selectedmenu={'menu':this.pathData.menu,'widgetName': this.pathData.widgetName};

      this.pathData.menu;
      this.apicall();


    });


    if(window.innerHeight==500 && window.innerWidth==1093){
      this.csshide=true;
    } else if(window.innerHeight>500 && window.innerWidth>1093){
      this.csshide=true;
    } else if(window.innerHeight<500 && window.innerWidth<1093){
      this.csshide=true;
    }

  }

  clickmenu(item){
    this.selectedmenu={'menu':item.widgetDesc,'widgetName': item.widgetName};
   }

  @HostListener('window:scroll')
    handleScroll(){
      const windowScroll = window.pageYOffset;
      if(windowScroll >= 24){
        this.landingsidesticky1 = true;
        this.landingsidesticky2 = true;

      } else {
        this.landingsidesticky1 = false;
        this.landingsidesticky2 = false;
      }
    }

    @HostListener("window:resize")
    onResize() {
         if(window.innerHeight==500 && window.innerWidth==1093){
          //this.landingsidesticky1 = false;
          //this.landingsidesticky2 = true;
          this.csshide=true;
        }else  if(window.innerHeight>500 && window.innerWidth>1093){
          //this.landingsidesticky1 = false;
         // this.landingsidesticky2 = true;
          this.csshide=true;
        }else  if(window.innerHeight<500 && window.innerWidth<1093){
          this.csshide=false;
        }
     }



  apicall() {
       if (this.page && this.page != "" && this.page != null &&  this.page != undefined) {
         let data: any = {}
         data.page = this.page;
         this.util.startLoader();
         this.api.create('widget/list', data).subscribe(res => {
         this.WidgetList=[];
         res.forEach(element => {
           if(element.viewType==true){
            this.WidgetList.push(element)
           }
         });
          this.util.stopLoader();
        },err => {
          this.util.stopLoader(); 
        });
      }

  }


}
