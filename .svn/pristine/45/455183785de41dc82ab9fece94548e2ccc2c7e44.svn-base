import { Injectable } from '@angular/core';
import { NgxSpinnerService } from 'ngx-spinner';
import { DatePipe } from '@angular/common';
import { fromEvent, merge, of, Observable } from 'rxjs';
import { mapTo } from 'rxjs/operators';
import Swal from 'sweetalert2';
import { getFullYear } from 'ngx-bootstrap/chronos';


@Injectable({
  providedIn: 'root',

})


export class UtilService {

  online$: Observable<boolean>;
  networkValue: boolean = false;
  loaderValue: boolean = false;
  constructor(private spinner: NgxSpinnerService, private datePipe: DatePipe) {
    this.online$ = merge(
      of(navigator.onLine),
      fromEvent(window, 'online').pipe(mapTo(true)),
      fromEvent(window, 'offline').pipe(mapTo(false))
    )
    this.networkStatus()
  }

  log(message: string) {
  }

  public networkStatus() {
    this.online$.subscribe(value => {
      //alert(value);
      this.networkValue = value;
    })
  }

  startLoader(val?: any) {
    if (this.networkValue) {
      if (val == undefined || val === null || val === '')
        this.spinner.show();
      else
        this.spinner.show(val);
      // setTimeout(() => {

      //   if(this.loaderValue){
      //     setTimeout(function(){alert("Not able to connect server.."); }, 100);
      //   }
      //   this.stopLoader();
      // }, 5000);
      // setTimeout(function(){this.stopLoader().bind(this); setTimeout(function(){alert("Not able to connect server.."); }, 100);}, 5000);
    } else {
      // alert("Check your Internet Connection..!");
      // Swal.fire('')

      const swalWithBootstrapButtons = Swal.mixin({
        customClass: {
          confirmButton: 'btn btn-primary',
        },
        buttonsStyling: false
      })

      swalWithBootstrapButtons.fire({
        title: 'Oops! No Internet',
        text: "It seems that you are not connected to the internet. Please, connect and try again.",
        icon: 'info',
        showCancelButton: false,
        confirmButtonText: 'OK',
        reverseButtons: false
      })



    }

  }

  stopLoader(val?: any) {
    this.loaderValue = false;
    if (val == undefined || val === null || val === '')
      this.spinner.hide();
    else
      this.spinner.hide(val);
  }


  // min-hour-sec-day getfrom this method

  dataconvert(curr, prev) {
    var ms_Min = 60 * 1000;
    var ms_Hour = ms_Min * 60;
    var ms_Day = ms_Hour * 24;
    var ms_Mon = ms_Day * 30;
    var ms_Yr = ms_Day * 365;
    var diff = curr - prev;

    let current = new Date(prev);
    var d1 = new Date(prev);
    const monthName = current.toLocaleString("default", { month: "long" })
    var date = monthName.substr(0, 3) + " " + current.getMonth();
    //  date +"-"+current.getFullYear();
    if (diff < ms_Min) {

      if (Math.round(diff / 1000) == 0) {
        return 'Just now';
      } else {
        return Math.round(diff / 1000) + ' sec';
      }

    } else if (diff < ms_Hour) {
      return Math.round(diff / ms_Min) + ' min';
    } else if (diff < ms_Day) {
      return Math.round(diff / ms_Hour) + 'hr';
    } else {
      return d1.toLocaleString();

    }

    // else if (diff < ms_Mon) {
    //    return Math.round(diff / ms_Day) + 'd';
    // } else if (diff < ms_Yr) {
    //   return Math.round(diff / ms_Mon) + 'm';
    // } else {
    //   return Math.round(diff / ms_Yr) + 'y';
    // }
  }



}
