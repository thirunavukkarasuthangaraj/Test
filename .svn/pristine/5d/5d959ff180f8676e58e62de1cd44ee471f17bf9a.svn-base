import { User } from './../types/User';
import { Injectable, Input } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { Router } from '@angular/router';

@Injectable({
  providedIn: 'root',
})

export class CommonValues {

  constructor( private router: Router ){

  }
      adminMode:boolean=false
      subject = new Subject<any>();
      comEmiter = new Subject<any>();
      profo = new Subject<any>();
      userBasicObj = new Subject<any>();
      businessData = new Subject<any>();
      communityData = new Subject<any>();
      communityBoolean = new Subject<any>();
      countData = new Subject<any>();
      refresh = new Subject<any>();

      userBasic :User;
      
      validNpi = new Subject<any>();
      setValidNPI(value) {
        this.validNpi.next(value);
      }
    
      getValidNPI(): Observable<any> {
        return this.validNpi.asObservable();
      }  
        businessid(id){
          this.subject.next(id);
        }

        getbusinessid(): Observable<any>{
          return this.subject.asObservable();
        }

        setProfo(id){
          this.profo.next(id);
        }

        getProfo(): Observable<any>{
          return this.profo.asObservable();
        }

        communitydata(id){
          this.subject.next(id);
        }

        getcommunitydata(): Observable<any>{
          return this.subject.asObservable();
        }

        setCommunityEventEmitter(id){
          this.comEmiter.next(id);
        }

        getCommunityEventEmitter(): Observable<any>{
          return this.comEmiter.asObservable();
        }

        redirect(data,path){
          setTimeout(() => {  this.router.navigate([path],{queryParams :data,replaceUrl: true})}, 400);
        }

        setUserData(data) {
          this.userBasicObj.next(data)
      }
     
      getUserData(): Observable<any> {
        return this.userBasicObj.asObservable();
      }

        setBusinessData(data) {
          	this.businessData.next(data)
        }
       
        getBusinessData(): Observable<any> {
          return this.businessData.asObservable();
        }

        setCommuityData(data) {
          this.communityData.next(data)
        }
        
        getCommuityData(): Observable<any> {
          return this.communityData.asObservable();
        }

        setCommuityBoolean(data) {
          this.communityBoolean.next(data)
        }
        
        getCommuityBoolean(): Observable<any> {
          return this.communityBoolean.asObservable();
        }

        setCharCount(data) {
          this.countData.next(data)
        }
        
        getCharCount(): Observable<any> {
          return this.countData.asObservable();
        }

        setRefresh(data) {
          this.refresh.next(data)
        }
        
        getRefresh(): Observable<any> {
          return this.refresh.asObservable();
        }



      }
