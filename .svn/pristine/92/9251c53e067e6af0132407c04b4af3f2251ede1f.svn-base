import { Router } from '@angular/router';
import { ApiService } from '../../../services/api.service';
import { UtilService } from '../../../services/util.service';
import { Component, ElementRef, HostListener, OnInit, ViewChild } from '@angular/core';
import Swal from 'sweetalert2';
import { ModalDirective } from 'ngx-bootstrap/modal';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import * as _ from 'lodash';
import { Subscription } from 'rxjs';
import { SearchData } from 'src/app/services/searchData';

@Component({
  selector: 'app-business-list',
  templateUrl: './business-list.component.html',
  styleUrls: ['./business-list.component.scss']
})
export class BusinessListComponent implements OnInit {


  @ViewChild('landingside1', { static: false }) menuElement: ElementRef;
  @ViewChild('autoShownModal', { static: false }) autoShownModal: ModalDirective;

  landingsidesticky1: boolean = false;
  landingsidesticky2: boolean = false;
  elementPosition: any;
  noDatafound = "You are not in any Businesses yet."

  organizationList: any;
  businessExistList: any;
  businessPendingList: any;

  businessdetail: any;
  tempbusinessdetail:any;
  isModalShown = false;
  formValidity: boolean = false

  backdropConfig = {
    backdrop: true,
    ignoreBackdropClick: true,
    show: true
  }

  subscriber: Subscription
  bname;
  chooseBusinessPage: FormGroup;
  userType = "ALL"
  seletedOrgnazationId: any;
  showNoDatafound: boolean = false;
  btnnameshow='All'
  searchKey
  constructor(
    private util: UtilService,
    private api: ApiService,
    private router: Router,
    private formBuilder: FormBuilder,
    private searchData: SearchData
  ) {
    this.subscriber = this.searchData.getBooleanValue().subscribe(res=>{
      if(res.boolean == true){
      this.companydetailsapicall();
      }
    })
   }

  ngOnInit() {
    this.companydetailsapicall();
  }

  get controlOfForms() {
    return this.chooseBusinessPage.controls;
  }

  keyupdata(event){
    if(event.target.value.length==0){
      this.onsearch('');
    }
  }

  onsearch(val) {
     if(val!=undefined){
      val = val.trim().toLowerCase();
    }

    if( this.btnnameshow=='All'){
      this.businessdetail =this.tempbusinessdetail;
      this.businessdetail = this.filterByString(this.businessdetail, val);
     }else if( this.btnnameshow=='All'){
      this.businessdetail = this.tempbusinessdetail;
      this.businessdetail = this.businessdetail.filter(function (item) {
      return item.isSuperAdmin == true;
      })
      this.businessdetail = this.filterByString(this.businessdetail, val);
      }else if( this.btnnameshow=='Admin'){
        this.businessdetail = this.tempbusinessdetail;
        this.businessdetail = this.businessdetail.filter(function (item) {
        return item.isAdmin == true;
        })
        this.businessdetail = this.filterByString(this.businessdetail, val);
        }
  }
  sort_by_key(admin) {
    if(admin=='superadmin'){
      this.noDatafound = "You are not a super admin any Business Pages."
      this.btnnameshow='Super Admin';
      this.businessdetail = this.tempbusinessdetail;
      this.businessdetail = this.businessdetail.filter(function (item) {
      return item.isSuperAdmin == true;
    })
    }else if(admin=='admin'){
      this.noDatafound = "You are not an admin any Business Pages."
      this.btnnameshow='Admin';
      this.businessdetail = this.tempbusinessdetail;
      this.businessdetail = this.businessdetail.filter(function (item) {
      return item.isAdmin == true;
    })
    } else if(admin=='all'){
      this.noDatafound = "You are not in any Businesses yet."
      this.btnnameshow='All';
      this.businessdetail =this.tempbusinessdetail;
      this.businessdetail = this.filterByString(this.businessdetail, '');
     }

     if (this.businessdetail.length == 0) {
      this.showNoDatafound = true;
    } else {
      this.showNoDatafound = false;
    }

  }

  filterByString(data, s) {
    return data.filter(e => e.businessName.toLowerCase().includes(s))
      .sort((a, b) => a.businessName.toLowerCase().includes(s) && !b.businessName.toLowerCase().includes(s) ? -1 : b.businessName.toLowerCase().includes(s) && !a.businessName.toLowerCase().includes(s) ? 1 : 0);
 }
  CreatebusinessPage() {
    //this.pagelistData.businessPageStatus();
  }

  companydetailsapicall() {
    let datas: any = {};
    datas.userId = localStorage.getItem('userId')
    this.util.startLoader()
    this.api.create("business/check/user", datas).subscribe(res => {
      ////// console.log('businessdetail',res)
      this.util.stopLoader()
       if (res && res != null && res.data.businessModelList.length > 0) {
        let d = [];
        res.data.businessModelList.forEach(e => {
          d.push(e);
        });
        this.businessdetail = d;
        this.businessdetail.sort(this.dynamicSort('businessName'))
        this.tempbusinessdetail=this.businessdetail;
      } else {
        this.businessdetail = [];
      }
    },err => {
      this.util.stopLoader();

     });
  }


  ngAfterViewInit() {
    window.scrollTo(0, 0);
   // this.elementPosition = this.menuElement.nativeElement.offsetTop;
    // ////// console.log(this.elementPosition);
  }

  @HostListener('window:scroll')
  handleScroll() {
    const windowScroll = window.pageYOffset;
    if (windowScroll >= 24) {
      this.landingsidesticky1 = true;
      this.landingsidesticky2 = true;
    } else {
      this.landingsidesticky1 = false;
      this.landingsidesticky2 = false;
    }
  }

  getbussinessid(data) {
    this.checkadmin(data.businessId, data)
  }

  checkadmin(businessid, data) {
    let datas: any = {};
    datas.businessId = businessid;
    datas.userId = localStorage.getItem('userId');
    this.util.startLoader();
    this.api.create("business/check/admin", datas).subscribe(res => {
      this.util.stopLoader();

      localStorage.setItem('businessId', businessid)
      localStorage.setItem('isAdmin', res.isAdmin)
      localStorage.setItem('isSuperAdmin', res.isSuperAdmin)
      localStorage.setItem('screen', 'business')
      localStorage.setItem('adminviewflag', 'false')
      this.router.navigate(['business'], { queryParams: data })

    },err => {
      this.util.stopLoader();

     });
  }

  onselecte(value) {
    this.seletedOrgnazationId = value.item.organizationId;
  }

  clear() {
    ////// console.log("1");
    this.seletedOrgnazationId = null;
  }



  navigate() {
    ////// console.log(this.chooseBusinessPage.value.organizationName)
    this.formValidity = true

    this.chooseBusinessPage.value.organizationName = this.seletedOrgnazationId;

    if (this.seletedOrgnazationId != null && this.chooseBusinessPage.valid) {
      ////// console.log(this.organizationList)

      let pendingBussiness = _.find(this.businessPendingList, ["organizationId", this.chooseBusinessPage.value.organizationName]);
      let existsBusiness = _.find(this.businessExistList, ["organizationId", this.chooseBusinessPage.value.organizationName]);
      let OrgList = _.find(this.organizationList, ["organizationId", this.chooseBusinessPage.value.organizationName]);

      ////// console.log(pendingBussiness)
      ////// console.log(existsBusiness)
      ////// console.log(OrgList)
      this.seletedOrgnazationId = null;
      this.organizationList.forEach(ele => {

        if (ele.organizationId == this.chooseBusinessPage.value.organizationName) {

          // existing Business check
          if (existsBusiness != undefined) {

            const swalWithBootstrapButtons = Swal.mixin({
              customClass: {
                confirmButton: 'btn btn-success',
                cancelButton: 'btn btn-danger'
              },
              buttonsStyling: false
            })

            swalWithBootstrapButtons.fire({
              title: 'Business page exists already',
              text: "Do you want to create a new business page with a different location?",
              icon: 'info',
              showCancelButton: true,
              confirmButtonText: 'Yes',
              cancelButtonText: 'No',
              reverseButtons: true
            }).then((result) => {
              if (result.isConfirmed) {

                var obj: any = {}
                obj.organizationId = ele.organizationId;
                obj.businessName = ele.organizationName;
                obj.zipCode = ele.zipCode;
                obj.city = ele.city;
                obj.state = ele.state;
                obj.country = ele.country;
                obj.value = true;
                obj.street = ele.street && ele.street !== null ? ele.street : null;
                obj.referenceId = ele.businessId;

                this.util.startLoader()
                setTimeout(() => {
                  this.router.navigate(['createBusiness'], {skipLocationChange: true, queryParams: obj })
                }, 1000);
                this.util.stopLoader()

              } else if ( result.dismiss === Swal.DismissReason.cancel ) {
                this.chooseBusinessPage.reset();
                // swalWithBootstrapButtons.fire(
                //   'Cancelled',
                //   'Business not Created :)',
                //   'error'
                // )
                // Swal.fire({
                //   position: 'center',
                //   icon: 'info',
                //   title: 'Business not created',
                //   showConfirmButton: false,
                //   timer: 3000,
                //   allowOutsideClick: false,
                // })

              }
            })


          }    // pending business
          else if (pendingBussiness != undefined) {

            const swalWithBootstrapButtons = Swal.mixin({
              customClass: {
                confirmButton: 'btn btn-success',
                cancelButton: 'btn btn-danger'
              },
              buttonsStyling: false
            })

            swalWithBootstrapButtons.fire({
              title: 'Pending business verification ',
              text: "Do you want to verify your business page now?",
              icon: 'info',
              showCancelButton: true,
              confirmButtonText: 'Yes',
              cancelButtonText: 'No',
              reverseButtons: true
            }).then((result) => {
              if (result.isConfirmed) {

                var obj: any = {}
                obj.organizationId = ele.organizationId;
                obj.businessName = ele.organizationName;
                obj.zipCode = ele.zipCode;
                obj.city = ele.city;
                obj.state = ele.state;
                obj.country = ele.country;
                obj.value = true;
                obj.street = ele.street && ele.street !== null ? ele.street : null;
                obj.referenceId = ele.businessId;
                this.util.startLoader();
                setTimeout(() => {
                  // this.router.navigate(['createBusiness'], { queryParams: obj })
                  this.router.navigate(['createBusiness'], {skipLocationChange: true, queryParams: obj })

                }, 1000);
                this.util.stopLoader()

              }
              // else if (result.dismiss === Swal.DismissReason.cancel) {
              //   this.chooseBusinessPage.reset();
              //   // swalWithBootstrapButtons.fire(
              //   //   'Cancelled',
              //   //   'Business not Created :)',
              //   //   'error'
              //   // )

              //   Swal.fire({
              //     position: 'center',
              //     icon: 'info',
              //     title: 'Business page not created',
              //     showConfirmButton: false,
              //     timer: 3000,
              //     allowOutsideClick: false,
              //   })
              // }
            })

          }   //   new business  create
          else {
            var obj: any = {}
            obj.organizationId = ele.organizationId;
            obj.businessName = ele.organizationName
            obj.zipCode = ele.zipCode
            obj.city = ele.city
            obj.state = ele.state
            obj.country = ele.country
            obj.street = ele.street &&
              ele.street !== null ? ele.street : null

            this.util.startLoader()
            setTimeout(() => {
              // this.router.navigate(['createBusiness'], { queryParams: obj })
              this.router.navigate(['createBusiness'], {skipLocationChange: true, queryParams: obj })

            }, 1000);
            this.util.stopLoader()
          }


        }
      })
    } else {


      Swal.fire({
        position: 'center',
        icon: 'info',
        title: 'Please select a valid organization',
        // showConfirmButton: true,
        showConfirmButton: false,
        timer: 3000,
        allowOutsideClick: false,
      }).then((result) => {
        if (result.isConfirmed) {
          this.chooseBusinessPage.reset();
        }
      })



    }
  }

  dynamicSort(property) {
    var sortOrder = 1;
     if(property[0] === "-") {
        sortOrder = -1;
        property = property.substr(1);
    }
     return function (a,b) {
        if(sortOrder == -1){
            return b[property].localeCompare(a[property]);
        }else{
            return a[property].localeCompare(b[property]);
        }
    }
}


  BusniessCreatePage() {
    var id: any = localStorage.getItem('userId')
    this.util.startLoader()
    this.api.query('business/check/orgname/' + id).subscribe(res => {
      // console.log('this is business repsonse errrrr',res)
      this.util.stopLoader()
       if (res.code == '10000') {
        // ////// console.log('this is business repsonse')
        // ////// console.log(res)
        Swal.fire({
          title: 'Invalid user ID',
          text: 'Sorry there! The user ID seems to be invalid.',
          icon: 'error',
          showDenyButton: false,
          confirmButtonText: `ok`,

        }).then((result) => {
          /* Read more about isConfirmed, isDenied below */
          if (result.isConfirmed) {

          }
        });
      } else if (res.code == '10001') {
        ////// console.log('// USER_NOT_PRESENT = "10001";')
        Swal.fire({
          title: 'Invalid user',
          text: 'Sorry there! There is no such user present.',
          icon: 'error',
          showDenyButton: false,
          confirmButtonText: `ok`,

        }).then((result) => {
          /* Read more about isConfirmed, isDenied below */
          if (result.isConfirmed) {

          }
        });
      } else if (res.code == '10002') {
        ////// console.log('// WORK_EXP_NOT_PRESENT = "10002";')
        Swal.fire({
          text: 'Work experience is required for creating a business page. It seems you have not provided any. Please create one in your profile.',
          title: 'Work Experience is required',
          icon: 'info',
          showDenyButton: false,
          confirmButtonText: `ok`,

        }).then((result) => {
          /* Read more about isConfirmed, isDenied below */
          if (result.isConfirmed) {

          }
        });
      } else if (res.code == '10003') {
        ////// console.log('// CURRENT_ORG_NOT_PRESENT = "10003";')
        //
        Swal.fire({
          title: 'Current Organization is required',
          text: 'You need a business organization where you should be currently working for creating a Business Page. Please go to Profile > Add Work Experience > Check the Current Organization check-box.',
          icon: 'info',
          showDenyButton: false,
          confirmButtonText: `ok`,

        }).then((result) => {
          /* Read more about isConfirmed, isDenied below */
          if (result.isConfirmed) {

          }
        });
      } else if (res.code == '10004') {
        ////// console.log('// BUSINESS_PAGE_NOT_EXIST = "10004";')
        var obj: any = {}

        obj.businessName = res.data.organisation.organizationName
        obj.zipCode = res.data.organisation.zipCode
        obj.city = res.data.organisation.city
        obj.state = res.data.organisation.state
        obj.country = res.data.organisation.country
        obj.street = res.data.organisation.street && res.data.organisation.street !== null ? res.data.organisation.street : null
        obj.orgId = res.data.organisation.organizationId;
        setTimeout(() => {
          this.router.navigate(['createBusiness'], { queryParams: obj })

        }, 400);
      } else if (res.code == '10005') {
        ////// console.log('// public static final String BUSINESS_PAGE_NOT_VERIFED = "10005";')
        Swal.fire({
          // Your business has not been verified yet! Please verify with the verification code that was sent to your business email address.
          // title: res.message,
          title: "Business page not verified",
          text: "There is a business page existing in your current organization which has not been verified yet.",
          showDenyButton: false,
          confirmButtonText: `ok`,
          icon: 'info',

        }).then((result) => {
          /* Read more about isConfirmed, isDenied below */
          if (result.isConfirmed) {

          }
        });
      } else if (res.code == "10008") {
        ////// console.log('BUSINESS_PAGE_EXIST = "10008"')

        Swal.fire({
          title: "Business page exists already",
          text: "Your current organization already has a business page. Please click 'Redirect' to visit the page or click 'Create' to make a new page or click cancel.",
          icon: 'question',
          showDenyButton: true,
          showCancelButton: true,
          reverseButtons: true,

          cancelButtonText: 'Cancel',
          denyButtonText: 'Create',
          confirmButtonText: 'Redirect',


        }).then((result) => {
          if (result.isConfirmed) {

            var obj: any = {}

            obj.businessBanner = res.data.business.businessBanner
            obj.businessId = res.data.business.businessId
            obj.businessLogo = res.data.business.businessLogo
            obj.businessName = res.data.business.businessName
            obj.businessOwner = res.data.business.businessOwner
            obj.businessStatus = res.data.business.businessStatus;
            obj.isSuperAdmin = res.data.business.isSuperAdmin;

            this.getbussinessid(obj) //redirecting to the existing business page that user was trying to create being oblivious

          } else if (result.dismiss) {


          } else if (result.isDenied) {
            setTimeout(() => {
              var object: any = {}
              object.value = 'create'
              object.businessName = res.data.business.businessName
              this.router.navigate(['createBusiness'], { queryParams: object })
            }, 400);
          }
        })
      }
      else if (res.code == '00000') {

        this.organizationList = res.data.organisation;
        this.businessExistList = res.data.businessExist;
        this.businessPendingList = res.data.businessPending;

        if (this.organizationList.length == 0) {
          Swal.fire({
            title: 'No Organisation ',
            text: 'No Organisation for this user',
            icon: 'error',
            showDenyButton: false,
            confirmButtonText: `ok`,
          }).then((result) => {
            if (result.isConfirmed) {

            }
          });

          return;
        } else if (this.organizationList.length == 1 && this.businessExistList == 0 && this.businessPendingList == 0) {
          var obj: any = {}
          res.data.organisation.forEach(ele => {
            obj.organizationId = ele.organizationId;
            obj.businessName = ele.organizationName
            obj.zipCode = ele.zipCode
            obj.address1 = ele.address1
            obj.address2 = ele.address2
            obj.city = ele.city
            obj.state = ele.state
            obj.country = ele.country
            obj.street = ele.street && ele.street !== null ? ele.street : null
          })

          this.router.navigate(['createBusiness'], { queryParams: obj })

        } else {

          this.isModalShown = true
          this.organizationList = res.data.organisation;
          ////// console.log(this.organizationList)
          this.chooseBusinessPage = this.formBuilder.group({
            organizationName: [null, [Validators.required]]
          })
        }




      } else if (res.code == '99999') {
      }
    },err => {
      this.util.stopLoader();
    });

  }

  onHidden(): void {
    this.isModalShown = false;
    this.formValidity = false;
  }

  hideModal(): void {
    this.autoShownModal.hide();
  }


  onUnfollow(event: any) : void{
    if(event != undefined && event != null){
      this.businessdetail = this.businessdetail.filter(element => element.businessId != event.businessId);
      this.tempbusinessdetail=this.businessdetail;

    }
  }

}
