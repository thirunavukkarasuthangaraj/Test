import { Component, OnInit } from "@angular/core";
import { FormGroup, FormBuilder, Validators } from "@angular/forms";
import { ApiService } from "src/app/services/api.service";
import { Router, ActivatedRoute } from "@angular/router";
import { NgxSpinnerService } from "ngx-spinner";
import { whiteSpaceValidator } from "../Helper/whitespaceValidator";
import { UtilService } from "src/app/services/util.service";
import { SearchData } from "src/app/services/searchData";
import { CookieService } from "ngx-cookie-service";

@Component({
  selector: "app-sign-up",
  templateUrl: "./sign-up.component.html",
  styleUrls: ["./sign-up.component.scss"],
})
export class SignUpComponent implements OnInit {
  signupForm: FormGroup;
  disableBtn = false;
  Authtokenservice: any;
  Authtoken: any;
  submitted = false;
  userData: any;
  Msg = false;
  MsgFailed = false;
  fileToUpload: File = null;
  signupCheckEmail = false;
  signUpEmail = null;
  directoryProfileId: any;

  emailPattern = "^[a-z0-9._%+-]+@[a-z.-]+.[a-z]{2,4}$";
  //emailPattern = "^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$";

  constructor(
    private fb: FormBuilder,
    private API: ApiService,
    private router: Router,
    private cookieservice: CookieService,
    private spinner: NgxSpinnerService,
    private route: ActivatedRoute,
    private util: UtilService,
    private searchData: SearchData
  ) {


   

    this.route.queryParams.subscribe((res) => {
      this.businessProfileId = res.businessProfileId;
      this.businessOrganizationDirectory = res.source;
      this.signUpEmail = res.emailId;
      // this.npiNo = res.npiNo;
    });
    var val: any = {}
    val.isLoggedOut = false
    this.searchData.setCommonVariables(val);
  }

  ngOnInit() {

    // this.spinner.hide();
    this.signupForm = this.fb.group({
      firstName: [
        "",
        [Validators.required, Validators.pattern("^[A-Za-z ]+$")],
      ],
      // lastName: ['', [Validators.required, Validators.pattern('^[A-Za-z ]+$'), whiteSpaceValidator.cannotContainSpace]],
      lastName: ["", [Validators.required, Validators.pattern("^[A-Za-z ]+$")]],
      email: [
        "",
        [
          Validators.required,
          Validators.email,
          Validators.pattern(this.emailPattern),
        ],
      ],
      // city: ['', Validators.required],
      // condition : [false , Validators.requiredTrue],
      // captcha : ['', Validators.required]
    });
    
    this.signupForm.valueChanges.subscribe((changedObj: any) => {
      this.disableBtn = this.signupForm.valid;
    });

    var url: any = this.router.url.substring(1, 7)
    if(url == 'invite'){
      setTimeout(() => {
        this.route.queryParams.subscribe((res) => {
          this.inviteeEmailId = res.emailId;
        });
      }, 300);

      setTimeout(() => {
        this.onLogout()
      }, 500);

    }else{
      this.profilesignup();
    }
  }

  inviteeEmailId: any;

  updateUserOnlineOrOffline(status: any) {
    let url = 'user/onlineoroffline';
    let user = {
      userId: localStorage.getItem('userId'),
      online: status.toUpperCase()
    };
    this.API.create(url, user).subscribe(res => {
      console.log("reload browser", res)
    },err => {
      this.util.stopLoader(); 
       
     });
  }

  onLogoutSuccess() {
    this.cookieservice.deleteAll();
    let allCookies = document.cookie.split(";");
    if (allCookies) {
      for (let i = 0; i < allCookies.length; i++) {
        document.cookie =
          allCookies[i] + "=;expires=" + new Date(0).toUTCString();
      }
    }
    localStorage.clear();
    var val: any = {}
    val.emailId = this.inviteeEmailId
    this.router.navigate(["signUp"], {queryParams: val});
  }

  onLogout() {
    console.log("pasing via 1")
    var val: any = {}
    val.isLoggedOut = true
    this.searchData.setCommonVariables(val);
    this.util.startLoader();
    this.API.onLogout().subscribe((res) => {
      if (res) {
        if (res.code === "00000") {
          this.util.stopLoader();
          this.updateUserOnlineOrOffline('OFFLINE');
          this.onLogoutSuccess();
        } else {
          this.util.stopLoader();
        }
      }
    });
  }

  ngAfterViewInit(): void {
    setTimeout(function () {
      window.scrollTo(0, 0);
    }, 500);
  }

  profilesignup() {
    this.route.queryParams.subscribe((res) => {
      console.log("sdjfksdjhf")
      console.log(res)
      this.directoryProfileId = res.profileId;
      if (res.firstName != null && res.lastName != null) {
        this.signupForm.patchValue({
          firstName: res.firstName,
          lastName: res.lastName,
        });
      }
      if(this.signUpEmail != null){
        this.signupForm.patchValue({
          email: this.signUpEmail
        })
      }
    });
  }

  get e() {
    return this.signupForm.controls;
  }
  businessProfileId: any;
  businessOrganizationDirectory: any;
  npiNo: any;
  signUp() {
    this.signupCheckEmail = false;
    let data: any = {};
    data.firstName = this.signupForm.value.firstName;
    data.lastName = this.signupForm.value.lastName;
    data.email = this.signupForm.value.email;
    data.directoryProfileId = this.directoryProfileId;
    data.profileId = this.businessProfileId;
    data.source = this.businessOrganizationDirectory;
    // data.npiNo = this.npiNo
    this.util.startLoader();
    this.API.create("user/signup", data).subscribe((res) => {
      this.util.stopLoader();
      if (res.code === "00000") {
        this.Msg = true;
        this.MsgFailed = false;
      } else if (res.code === "99999") {
        this.Msg = false;
        this.MsgFailed = true;
      } else if (res.code === "ALREADY_REGISTER_USER") {
        this.router.navigate(["/login"], { queryParams: { ruser: "1" } });
      } else if (res.code === "ALREADY_SIGNED_UP_CHECK_EMAIL") {
        this.signupCheckEmail = true;
      }
    },err => {
      this.util.stopLoader(); 
       
     });

    // }
  }

  Datareset() {
    this.signupForm.reset();
    // //// console.log('cancel button clicked')
  }

  resolved(captchaResponse: string) {
    // //// console.log(`Resolved captcha with response: ${captchaResponse}`);
  }
}
