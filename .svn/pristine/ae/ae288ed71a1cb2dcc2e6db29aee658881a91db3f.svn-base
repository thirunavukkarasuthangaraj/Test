import { exists } from 'fs';
import { User } from './../../types/User';
import { values } from 'lodash';
import { SocketService } from './../../services/socket.service';
import { NgxSummernoteDirective } from 'ngx-summernote';
import { MessagescrollDirective } from './../../directives/messagescroll.directive';
import Swal from 'sweetalert2';
import { AppSettings } from 'src/app/services/AppSettings';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { UtilService } from 'src/app/services/util.service';
import { Component, OnInit, OnDestroy, TemplateRef, ViewChild, ElementRef, AfterViewInit, HostListener } from '@angular/core';
import { ApiService } from 'src/app/services/api.service';
import { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';
import { Socket } from 'ngx-socket-io';
import { DatePipe } from '@angular/common';
import { MatSelectModule } from '@angular/material/select';
import { MatMenuTrigger } from '@angular/material';
import { Location } from '@angular/common';

declare var $: any;
declare var SockJS: any;
declare var Stomp: any;

export enum MESSAGESTATUS {
  EMPTY, MESSAGE
}

@Component({
  selector: 'app-new-message-page',
  templateUrl: './new-message-page.component.html',
  styleUrls: ['./new-message-page.component.scss']
})
export class NewMessagePageComponent implements OnInit, OnDestroy, AfterViewInit {

  @ViewChild('videoPlayer', { static: false }) videoplayer: ElementRef;
  @ViewChild('chartDiscussion', { static: false }) chartDisc: ElementRef;
  @ViewChild('UploadFileInput', { static: false }) UploadFileInput: ElementRef;
  @ViewChild(MessagescrollDirective, { static: false }) scrollDir: MessagescrollDirective;
  @ViewChild(NgxSummernoteDirective, { static: false }) summernote: NgxSummernoteDirective;
  @ViewChild(MatMenuTrigger, { static: true }) matMenuTrigger: MatMenuTrigger;
  @ViewChild('scrollMe', { static: false }) private myScrollContainer: ElementRef;

  menuTopLeftPosition = { x: '0', y: '0' }
  configlist = {
    itemsPerPage: 5,
    currentPage: 1
  }
  config = {
    focus: true,
    placeholder: 'Enter message',
    toolbar: []
  };
  modalRef: BsModalRef;
  modalRefAddgroup: BsModalRef;
  selectMessage = MESSAGESTATUS;
  messageStatus = MESSAGESTATUS.EMPTY;
  userId: any;
  msgPagnination = {
    page: 0,
    limit: 30,
    order: 'desc'
  };
  messageList: Array<any> = [];
  searchAfterKeys = null;
  DataLength: any = 0;
  sendMsgres = {
    recipientId: "",
    date: ""
  };
  emptyMsgOpt = {
    opt: 'empty'
  };
  contactList: Array<any> = [];
  tempContactList: Array<any> = [];
  newContactList: Array<any> = [];
  tempNewContactList: Array<any> = [];
  paginationFlag: Boolean = true;
  searchBusgroupList;
  searchConatct: any;
  groupData: any = {
    groupName: null,
    contacts: [],
    name: [],
    isAutoGeneratedGroupName: Boolean
  };

  groupDataBusiness: any = {
    groupName: null,
    contacts: [],
    status: [],
  };

  groupDataCommunity: any = {
    groupName: null,
    contacts: [],
    status: [],
  };

  imgUrl: any = AppSettings.photoUrl;
  SelectedContact: any = {};
  searchData: any = {};
  searchMessage: Array<any> = [];
  sendMessageData: any = {};
  uploadFiles: Array<any> = [];
  EdituploadFiles: Array<any> = [];

  attachment = false;
  imageAttachmentEdit = false;
  FormData: any;
  fancyList: Array<any> = [];
  slideIndex = 1;
  intervalExistSeen: any = true;
  intervalNonSeenMessage: any = false;
  contactfil: any = '';
  remainingContact: Array<any> = [];
  public stompClient;
  public innerHeight;
  public chatHeight;
  page: number = 1;
  newpage: number = 1;
  pagecountAddModel: number = 1;
  groupNameshow;
  addusers = [];
  newuserGroup = [];
  tempNewuserGroup = [];
  groupAdduserSearch: any;
  groupUserSearch: any;
  groupUserList: any = [];
  groupBusinessListMembers: any = [];
  groupCommunityListMembers: any = [];
  TempGroupUserList: any = [];
  tempBusinessList: any = [];
  tempCommunityList: any = [];
  data: any;
  pagination = 10;
  currentIndex = 0;
  redirect = true;
  editorDisabled: boolean = false
  editMessage: boolean = false
  editValue: any;
  editValueEditImage: any = [];
  removeElement: any = [];
  userRedirect: any = {};
  searchTerm: string;
  tpoicData: any;
  searchTxt: any;
  countAPI: any;
  showbottom: boolean = true;
  p: number = 1;
  constructor(private _api: ApiService, private _util: UtilService, private _location: Location,
    private aroute: ActivatedRoute, private route: Router, private modalService: BsModalService,
    private _socket: SocketService, public datepipe: DatePipe, public elementRef: ElementRef) {
    this.userId = localStorage.getItem('userId');
    this.initializeWebSocketConnection();
    this.getAllContacts();
    $.extend($.summernote.plugins, {
      'brenter': function (context) {
        this.events = {
          'summernote.enter': function (we, e) {
            if ((e.which === 13 || e.keyCode === 13) && e.altKey) {
            } else if (e.which === 13 || e.keycode === 13) {
              $('#sendmsg').click();
              e.preventDefault();
            }
          }
        };
      }
    });

  }



  @HostListener('window:resize', ['$event'])
  onResize(event) {
    this.innerHeight = window.innerHeight;
    this.chatHeight = this.innerHeight - 145;;
  }

  initializeWebSocketConnection() {

  }
  eventSelection(event) {
    this.contactfil = event;
    //////event)
    let urlTree;
    urlTree = this.route.createUrlTree([], {
      queryParams: { dropdown: event },
      queryParamsHandling: 'merge',
      preserveFragment: true
    });

    this._location.go(urlTree)

  }
  datechange(date) {
    const dateSendingToServer = new DatePipe('en-US').transform(date, 'MM/dd/yyyy HH:mm');
    return dateSendingToServer;
  }



  deleteitem(value) {
    //////value)

  }

  ngOnInit() {
    //this.route.routeReuseStrategy.shouldReuseRoute = () => false;
    this.innerHeight = window.innerHeight;
    this.chatHeight = this.innerHeight - 145;
    let type = this.aroute.snapshot.queryParamMap.get('dropdown');
    //////'types', type)
    if (type != null) {
      this.contactfil = type;
    } if (type == null) {
      this.contactfil = '';
    }

  }

  ngOnDestroy() {
    this.intervalExistSeen = false;
    this.intervalNonSeenMessage = false;
    //this.route.routeReuseStrategy.shouldReuseRoute = () => true;

    $.extend($.summernote.plugins, {
      'brenter': function (context) {
        this.events = {
          'summernote.enter': function (we, e) {
            if (e.which === 13 || e.keycode === 13) {
            }
          }
        };
      }
    });
  }
  lÌ¥
  ngAfterViewInit() {
    let userId = localStorage.getItem('userId');
    setInterval(() => {
      if (this.intervalExistSeen) {
        this.refreshContact();
      }
    }, 5 * 1000);
    setInterval(() => {
      if (this.intervalNonSeenMessage) {
        //this.getNonSeenMessage();
      }
    }, 2 * 1000);
  }

  routeProfie(item) {


  if(item.status!="INACTIVE"){

    let data: any = {}
    if (item.groupType == 'USER') {
      data.userId = item.groupId;
      this.route.navigate(["personalProfile"], { queryParams: data });

    } else if (item.groupType == 'TEAM') {
      this._api.query("teams/get/" + item.groupId).subscribe((res) => {
        if (res != undefined && res != null) {
          // res.data.Network.menu = "home"
          this.route.navigate(["teamPage/home"], {
            queryParams: res.data.teams,
          });
        }
      }, err => {
        this._util.stopLoader();
      });

    } else if (item.groupType == 'NETWORK') {
      this._util.startLoader();
      this._api.query("network/get/" + item.groupId).subscribe((res) => {
        this._util.stopLoader();
        if (res != undefined && res != null) {
          // res.data.Network.menu = "home"
          this.route.navigate(["networkPage/home"], {
            queryParams: res.data.Network,
          });
        }
      }, err => {
        this._util.stopLoader();
      });
    }
    else if (item.groupType == 'BUSINESS') {
      // if (item.refererId == null && item.refererId == 'null' && item.refererId == undefined) {
      //   data.businessId = item.groupId;
      // } else {
      //   data.businessId = item.refererId;
      // }
      data.businessId = item.refererId;
      data.userId = localStorage.getItem("userId");
      //   this._api.create("business/check/admin", data).subscribe((res) => {
      //     //  this.util.stopLoader()
      //     localStorage.setItem("businessId", data.businessId);
      //     localStorage.setItem("isAdmin", res.isAdmin);
      //     localStorage.setItem("isSuperAdmin", res.isSuperAdmin);
      //     localStorage.setItem("screen", "business");
      //     localStorage.setItem("adminviewflag", "false");
      //    this.route.navigate(["business"], { queryParams: data });
      //  });
      this.route.navigate(["business"], { queryParams: data });
    }
    else if (item.groupType == 'COMMUNITY') {

      // if (item.refererId == null && item.refererId == 'null' && item.refererId == undefined) {
      //   data.communityId = item.groupId;
      // } else {
      //   data.communityId = item.refererId;
      // }
      data.communityId = item.refererId;
      this.route.navigate(["community"], { queryParams: data });
    }
   }
  }


  // openModelChat(emptyMsgOpt, template?: TemplateRef<any>, ){
  //   if(emptyMsgOpt=="empty"){
  //     this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'group-msg-modal modal-md' }));
  //   }
  // }

  private refreshContact() {
    let userId = localStorage.getItem('userId');
    let url = "/message/contact/" + userId;
    // this._socket.send(url, null);
    /*this._api.messagePageService('GET', url).subscribe(res => {
    if (res) {
    let contactList = res;
    contactList.forEach(e => {
    let index = this.contactList.findIndex((item) => (item.userId === e.userId && item.groupId === e.groupId));
    if (index < 0) {
    } else {
    Object.assign(this.contactList[index], e);
    }
    });
    }
    })*/
  }

  private getNonSeenMessage() {
    let groupId = this.aroute.snapshot.queryParamMap.get('groupId');
    let type = this.aroute.snapshot.queryParamMap.get('type');
    if (groupId && groupId != null && groupId != "") {
      let url = "message/seen";
      let msg = {
        seen: false,
        authorId: groupId,
        recipientId: localStorage.getItem('userId'),
        messageType: type
      };
      this._api.messagePageService('POST', url, msg).subscribe(res => {
        if (res) {
          let msgList = res;
          if (msgList && msgList != null && msgList.length > 0) {
            msgList.forEach(element => {
              element.justSendmsg = false;
              this.messageList.push(element);
              this.messageList = this.sortByMsg(this.messageList, 'lastMessageOn');
            });

            setTimeout(() => {
              this.chartDisc.nativeElement.scroll({
                top: this.chartDisc.nativeElement.scrollHeight,
                left: 0
              });
            }, 200);
            this.updateNonSeenMessage(msgList);
          }
        }
      });
    }
  }

  private updateNonSeenMessage(message: any) {
    let id = localStorage.getItem('userId');
    let url = "message/seen/" + id;
    //this._socket.send(url, message);
    this._api.messagePageService('PUT', url, message).subscribe(res => {
      if (res) { }
    });
  }
  updateSearch(event) {
    this.searchTerm = event.target.value;
  }
  private getAllContacts() {
    let url = "message/contact/" + this.userId;
    this._util.startLoader('msgspinner');
    this._api.messagePageService('GET', url).subscribe(res => {
      if (res) {
        res.forEach(element => {
          if (element.lastMessageOn == null) {
            element.lastMessageOn = element.createdOn
          }
          this.contactList = res;
        });
        ////// "contactListcontactList", this.contactList)
        // this.contactList = res;
        this.queryParamBasedMethod();
        if (this.contactList && this.contactList != null && this.contactList.length > 0) {
          this.intervalExistSeen = true;
          this.intervalNonSeenMessage = true;
          this.contactList = this.sortBy(this.contactList, 'lastMessageOn');
          let datas = this.duplicate(this.contactList);
          this.contactList = datas;
        }
      } else {
        this.contactList = [];
        this._util.stopLoader('msgspinner');
      }
    }, err => {
      this._util.stopLoader();
    });
  }


  private queryParamBasedMethod() {
    let groupId = this.aroute.snapshot.queryParamMap.get('groupId');
    let type = this.aroute.snapshot.queryParamMap.get('type');
    let refererId = this.aroute.snapshot.queryParamMap.get('refererId');
    var newRefererId;
    if (groupId != null) {
      this.userRedirect.groupId = groupId
    } if (type != null) {
      this.userRedirect.type = type
    } if (refererId != null) {
      this.userRedirect.refererId = refererId
    }

    if (refererId == null) {
      newRefererId = groupId;
    } else if (refererId != null) {
      newRefererId = refererId
    }
    if (type && type != null && type != '') {

      let contact = {
        userId: localStorage.getItem('userId'),
        groupType: type.toUpperCase(),
        groupId: groupId,
        messageType: type.toUpperCase(),
        refererId: refererId
      };
      let url = "message/contact/exist";
      this.currentIndex = 0;
      this._util.startLoader('msgspinner');
      this._api.messagePageService('POST', url, contact).subscribe(res => {
        /*setTimeout(() => {
        this._util.stopLoader('msgspinner');
        }, 800); */
        this.sendMsgres.date = res['date'];
        this.sendMsgres.recipientId = res['groupId'];
        this.searchAfterKeys = null;
        if (res && res['code'] == '00000') {
          let d = res;
          if (d['pageAdmin']) {
            this.route.navigate(['/message']);
            return;
          }
          if (d['exist']) {

            if (res.groupStatus == "INACTIVE") {
              Swal.fire('', 'The ' + res.groupType.toLowerCase() + ' has been deleted', 'error');
            }

            if ((type === 'COMMUNITY' || type === 'BUSINESS') && (groupId == undefined || groupId == null || groupId == '')) {
              let l = {
                groupId: d['groupId'],
                type: type,
                refererId: refererId
              };
              //this.route.routeReuseStrategy.shouldReuseRoute = () => true;

              this.route.navigate(['/message'], { queryParams: l });

            }
            let index = this.contactList.findIndex((item) => item.groupId === d.groupId);
            if (index < 0) {
              this.contactList.push(d);
            }



            this.messageList = []
            this.SelectedContact = res;
            console.log("this.SelectedContact")
            console.log(this.SelectedContact)

            if(res.status=="GROUP_INACTIVE"){
              this.SelectedContact.status = "INACTIVE";
            }


            if (type === "BUSINESS" || type === "COMMUNITY") {
              this.SelectedContact.newstatus = this.SelectedContact.status;
              if (this.SelectedContact.status == "ACTIVE" && res.chatStatus == "ENABLED" || this.SelectedContact.status == "ACTIVE" && res.chatStatus == "NEW") {
                this.SelectedContact.status = "ACTIVE";
              } else if (this.SelectedContact.chatStatus == "DISABLED") {
                this.SelectedContact.status = "INACTIVE";
              }
            }
            this.sendMsgres.recipientId = d['groupId'];
            this.messageListscroll(d['groupId'], this.currentIndex, this.pagination);

          } else {

            this.contactList.push(res);
            this.SelectedContact = [];
            console.log("this.SelectedContact")
            console.log(this.SelectedContact)
            this.SelectedContact = res;
            console.log("this.SelectedContact")
            console.log(this.SelectedContact)
            this.messageList = [];
            // this.messageListscroll(d['groupId'],this.currentIndex,this.pagination);
            let datas = this.duplicate(this.contactList);
            this.contactList = datas;
            console.log(this.contactList)
          }
          this.messageStatus = MESSAGESTATUS.MESSAGE;
          if (type === 'USER') {

            this._socket.onMessage('/topic/message/' + groupId + '-' + localStorage.getItem('userId')).subscribe(res => {
              //////"USER", res)
              //////" this.SelectedContact", this.SelectedContact)
              if (this.SelectedContact.groupId == res.authorId && type === 'USER') {
                //" queryParam USER ", res)
                this.constructMsg(this, res);
              }

            });
            this._socket.onMessage('/topic/message/' + localStorage.getItem('userId') + '-' + groupId).subscribe(res => {
              //////"USER2", res)
              //////" this.SelectedContact", this.SelectedContact)
              if (this.SelectedContact.groupId == res.authorId && type === 'USER') {
                //" queryParam USER1 ", res)

                this.constructMsg(this, res);
              }
            });

            this._socket.onMessage('/topic/event/' + localStorage.getItem('userId')).subscribe(res_evn => {
              // console.log("res_evn userr " + JSON.stringify(res_evn))
              if (type === 'USER') {

                this.SelectedContact.status = res_evn.status;
                if(res_evn.status=='GROUP_INACTIVE'){
                  this.SelectedContact.status ="INACTIVE"
                }


              }
              // this.SelectedContact = {};
              console.log("this.SelectedContact")
              console.log(this.SelectedContact)
              // this.messageStatus = MESSAGESTATUS.EMPTY;
              // const index = this.contactList.findIndex(x => x.groupId === res_evn.groupId);
              // if (index !== undefined) this.contactList.splice(index, 1);
            });

          } else if (type === 'GROUP' || type === 'NETWORK' || type === 'TEAM') {

            this._socket.onMessage('/topic/message/' + groupId).subscribe(res => {
              //////"GROUP1", res);
              //////res);
              //////"STATUS",this.SelectedContact.status)
              if (type === 'GROUP' || type === 'NETWORK' || type === 'TEAM') {
                if (res.eventType == "ACTION") {
                  var dates = new Date(res.sentDate);
                  let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');
                  var tempMsg: any = [];
                  var secondTemMsg: any = [];
                  if (res.actionType == "ADDED_TO_NETWORK") {
                    if (res.authorId == this.userId) {
                      tempMsg = " You "
                    } else {
                      tempMsg = res.authorName;
                    }
                    if (res.recipientUserId == this.userId) {
                      secondTemMsg = " You "
                    } else {
                      secondTemMsg = res.recipientName;
                    }
                    res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                  }
                  else if (res.actionType == "REMOVED_FROM_NETWORK") {
                    if (res.authorId == this.userId) {
                      tempMsg = " You "
                    } else {
                      tempMsg = res.authorName;
                    }
                    if (res.recipientUserId == this.userId) {
                      secondTemMsg = " You "
                    } else {
                      secondTemMsg = res.recipientName;
                    }
                    res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                  } else if (res.actionType == "LEFT_NETWORK") {
                    if (res.authorId == this.userId) {
                      tempMsg = " You "
                    } else {
                      tempMsg = res.authorName;
                    }
                    if (res.recipientUserId == this.userId) {
                      secondTemMsg = " You "
                    } else {
                      secondTemMsg = res.recipientName;
                    }
                    res.oldMessage = tempMsg + " left " + " on " + latest_date;
                  } else if (res.actionType == "ADDED_TO_TEAM") {
                    if (res.authorId == this.userId) {
                      tempMsg = " You "
                    } else {
                      tempMsg = res.authorName;
                    }
                    if (res.recipientUserId == this.userId) {
                      secondTemMsg = " You "
                    } else {
                      secondTemMsg = res.recipientName;
                    }
                    res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                  } else if (res.actionType == "REMOVED_FROM_TEAM") {
                    if (res.authorId == this.userId) {
                      tempMsg = " You "
                    } else {
                      tempMsg = res.authorName;
                    }
                    if (res.recipientUserId == this.userId) {
                      secondTemMsg = " You "
                    } else {
                      secondTemMsg = res.recipientName;
                    }
                    res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                  } else if (res.actionType == "LEFT_TEAM") {
                    if (res.authorId == this.userId) {
                      tempMsg = " You "
                    } else {
                      tempMsg = res.authorName;
                    }
                    if (res.recipientUserId == this.userId) {
                      secondTemMsg = " You "
                    } else {
                      secondTemMsg = res.recipientName;
                    }
                    res.oldMessage = tempMsg + " left " + " on " + latest_date;
                  } else if (res.actionType == "ADDED_TO_MSG_GRP") {
                    if (res.authorId == this.userId) {
                      tempMsg = " You "
                    } else {
                      tempMsg = res.authorName;
                    }
                    if (res.recipientUserId == this.userId) {
                      secondTemMsg = " You "
                    } else {
                      secondTemMsg = res.recipientName;
                    }
                    res.oldMessage = tempMsg + " added " + secondTemMsg + " on " + latest_date;
                  } else if (res.actionType == "REMOVED_FROM_MSG_GRP") {
                    if (res.authorId == this.userId) {
                      tempMsg = " You "
                    } else {
                      tempMsg = res.authorName;
                    }
                    if (res.recipientUserId == this.userId) {
                      secondTemMsg = " You "
                    } else {
                      secondTemMsg = res.recipientName;
                    }
                    res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                  } else if (res.actionType == "LEFT_FROM_MSG_GRP") {
                    if (res.authorId == this.userId) {
                      tempMsg = " You "
                    } else {
                      tempMsg = res.authorName;
                    }
                    if (res.recipientUserId == this.userId) {
                      secondTemMsg = " You "
                    } else {
                      secondTemMsg = res.recipientName;
                    }
                    res.oldMessage = tempMsg + " left " + " on " + latest_date;
                  } else if (res.actionType == "ENABLED_RIGHTS") {
                    if (res.authorId == this.userId) {
                      tempMsg = " You "
                    } else {
                      tempMsg = res.authorName;
                    }
                    if (res.recipientUserId == this.userId) {
                      secondTemMsg = " You "
                    } else {
                      secondTemMsg = res.recipientName;
                    }
                    res.oldMessage = tempMsg + " enabled chat rights for " + secondTemMsg + " on " + latest_date;
                  } else if (res.actionType == "DISABLED_RIGHTS") {
                    if (res.authorId == this.userId) {
                      tempMsg = " You "
                    } else {
                      tempMsg = res.authorName;
                    }
                    if (res.recipientUserId == this.userId) {
                      secondTemMsg = " You "
                    } else {
                      secondTemMsg = res.recipientName;
                    }
                    res.oldMessage = tempMsg + " disabled  chat rights for " + secondTemMsg + " on " + latest_date;
                  }

                  else if (this.SelectedContact.groupType == "NETWORK" && res.actionType == "DEACTIVATED") {
                    res.oldMessage =   res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                  }

                  else if (this.SelectedContact.groupType == "TEAM" && res.actionType == "DEACTIVATED") {
                    res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                  }

                  else if (this.SelectedContact.groupType == "BUSINESS" && res.actionType == "DEACTIVATED") {
                    res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                  }

                  else if (this.SelectedContact.groupType == "COMMUNITY" && res.actionType == "DEACTIVATED") {
                    res.oldMessage = res.oldMessage =res.message+" on " + latest_date + " No further communication is possible.";
                  }


                  else {
                    res.oldMessage = res.message + " on " + latest_date;

                  }
                }



                if (this.SelectedContact.status == 'ACTIVE' && res.recipientId == this.sendMsgres.recipientId) {
                  //" queryParam GROUP ", res)
                  this.constructMsg(this, res);
                }
              }

            });




            this._socket.onMessage('/topic/event/' + localStorage.getItem('userId')).subscribe(res_evn => {
              //////"GROUP2", res)

             // console.log("res_evn GROUP2 "+JSON.stringify(res_evn))

              if (type === 'GROUP' || type === 'NETWORK' || type === 'TEAM') {

                this.SelectedContact.status = res_evn.status;
                if(res_evn.status=='GROUP_INACTIVE'){
                  this.SelectedContact.status ="INACTIVE"
                }
                //////'topic/event', res_evn);

                this.tpoicData = res_evn;
                // const index = this.contactList.findIndex(x => x.groupId === res_evn.groupId);
                // if (index !== undefined) this.contactList.splice(index, 1);
                //
                // this.messageStatus = MESSAGESTATUS.EMPTY;
                if (this.SelectedContact.groupId == res_evn.groupId) {
                  if (res_evn.groupStatus == 'REVOKED') {
                    // Swal.fire(res_evn.groupOwner + ' removed you from ' + res_evn.groupName);
                  } else if (res_evn.groupStatus == 'INACTIVE') {
                    Swal.fire(res_evn.groupName + ' group has been deleted');
                  }
                }
              }
            });

          } else if (type === 'BUSINESS' || type === 'COMMUNITY') {

            if (groupId != undefined && groupId != null && groupId != "") {
              this._socket.onMessage('/topic/message/' + groupId).subscribe(res => {

                if (res.recipientId == this.SelectedContact.groupId && type === 'BUSINESS' || res.recipientId == this.SelectedContact.groupId && type === 'COMMUNITY') {
                  // if (res.eventType == "ACTION") {
                  //   var dates = new Date(res.sentDate);
                  //   let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');
                  //   res.oldMessage = res.message + " on " + latest_date;
                  // }
                  if (res.eventType == "ACTION") {
                    var dates = new Date(res.sentDate);
                    let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');

                    var tempMsg: any = [];
                    var secondTemMsg: any = [];
                    if (res.actionType == "ADDED_TO_NETWORK") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                    }
                    else if (res.actionType == "REMOVED_FROM_NETWORK") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "LEFT_NETWORK") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " left " + " on " + latest_date;
                    } else if (res.actionType == "ADDED_TO_TEAM") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " joined  " + " on " + latest_date;
                    } else if (res.actionType == "REMOVED_FROM_TEAM") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "LEFT_TEAM") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " left " + " on " + latest_date;
                    } else if (res.actionType == "ADDED_TO_MSG_GRP") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " added " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "REMOVED_FROM_MSG_GRP") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "LEFT_FROM_MSG_GRP") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " left " + " on " + latest_date;
                    } else if (res.actionType == "ENABLED_RIGHTS") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " enabled chat rights for " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "DISABLED_RIGHTS") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " disabled  chat rights for " + secondTemMsg + " on " + latest_date;
                    }

                    else if (this.SelectedContact.groupType == "NETWORK" && res.actionType == "DEACTIVATED") {
                      res.oldMessage =  res.oldMessage =res.message+" on " + latest_date + " No further communication is possible.";
                    }

                    else if (this.SelectedContact.groupType == "TEAM" && res.actionType == "DEACTIVATED") {
                      res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                    }

                    else if (this.SelectedContact.groupType == "BUSINESS" && res.actionType == "DEACTIVATED") {
                      res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                    }

                    else if (this.SelectedContact.groupType == "COMMUNITY" && res.actionType == "DEACTIVATED") {
                      res.oldMessage = res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                    }

                    else {
                      res.oldMessage = res.message + " on " + latest_date;

                    }
                  }


                  //" queryParam BUSINESS ", res)
                  this.constructMsg(this, res);
                }
              });
            } else {
              this._socket.onMessage('/topic/message/' + refererId).subscribe(res => {
                ////"USER BUSINESS Message2", res)

                ////this.SelectedContact.status)

                if (type === 'BUSINESS' || type === 'COMMUNITY') {


                  if (res.recipientId == this.SelectedContact.groupId) {
                    // if (res.eventType == "ACTION") {
                    //   var dates = new Date(res.sentDate);
                    //   let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');
                    //   res.oldMessage = res.message + " on " + latest_date;
                    // }

                    if (res.eventType == "ACTION") {
                      var dates = new Date(res.sentDate);
                      let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');

                      var tempMsg: any = [];
                      var secondTemMsg: any = [];
                      if (res.actionType == "ADDED_TO_NETWORK") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                      }
                      else if (res.actionType == "REMOVED_FROM_NETWORK") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                      } else if (res.actionType == "LEFT_NETWORK") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " left " + " on " + latest_date;
                      } else if (res.actionType == "ADDED_TO_TEAM") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                      } else if (res.actionType == "REMOVED_FROM_TEAM") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                      } else if (res.actionType == "LEFT_TEAM") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " left " + " on " + latest_date;
                      } else if (res.actionType == "ADDED_TO_MSG_GRP") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " added " + secondTemMsg + " on " + latest_date;
                      } else if (res.actionType == "REMOVED_FROM_MSG_GRP") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                      } else if (res.actionType == "LEFT_FROM_MSG_GRP") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " left " + " on " + latest_date;
                      } else if (res.actionType == "ENABLED_RIGHTS") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " enabled chat rights for " + secondTemMsg + " on " + latest_date;
                      } else if (res.actionType == "DISABLED_RIGHTS") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " disabled  chat rights for " + secondTemMsg + " on " + latest_date;
                      }
                      else if (this.SelectedContact.groupType == "NETWORK" && res.actionType == "DEACTIVATED") {
                        res.oldMessage =  res.oldMessage =res.message+" on " + latest_date + " No further communication is possible.";
                      }

                      else if (this.SelectedContact.groupType == "TEAM" && res.actionType == "DEACTIVATED") {
                        res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                      }

                      else if (this.SelectedContact.groupType == "BUSINESS" && res.actionType == "DEACTIVATED") {
                        res.oldMessage = res.oldMessage =res.message+" on " + latest_date + " No further communication is possible.";
                      }

                      else if (this.SelectedContact.groupType == "COMMUNITY" && res.actionType == "DEACTIVATED") {
                        res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                      }

                      else {
                        res.oldMessage = res.message + " on " + latest_date;

                      }
                    }

                    //" queryParam BUSINESS refererId", res)

                    this.constructMsg(this, res);
                  }
                }
              });
            }

            this._socket.onMessage('/topic/event/' + localStorage.getItem('userId')).subscribe(res_evn => {
              //"res_business one event " + JSON.stringify(res_evn))

              //console.log("res_business oneevent " +JSON.stringify(res_evn))

              if (type === 'BUSINESS' || type === 'COMMUNITY') {

                if (res_evn.status == "ACTIVE") {
                  if (res_evn.chatStatus == "ENABLED") {
                    this.SelectedContact.status = "ACTIVE";
                  } else if (res_evn.chatStatus == "DISABLED") {
                    this.SelectedContact.status = "INACTIVE";
                  }
                } else if (res_evn.status == "INACTIVE" || res_evn.status=="GROUP_INACTIVE") {
                  this.SelectedContact.status = "INACTIVE";
                }


              }
              // const index = this.contactList.findIndex(x => x.groupId === res_evn.groupId);
              // if (index !== undefined) this.contactList.splice(index, 1);
            });

          }


          this._util.stopLoader('msgspinner');
        } else {
          this._util.stopLoader('msgspinner');
          if (this.redirect == true) {
            Swal.fire('', res['message'], 'error');
          } else if (this.redirect == false) {
            this.redirect = true;
          }
          this._location.replaceState('/message');

          // this.route.navigate(['/message']);
          //this._location.back();
          // this.route.navigate(['/message']);
        }
      }, err => {
        this._util.stopLoader();
      });
    } else {
      this._util.stopLoader('msgspinner');
    }
    this._socket.onMessage('/topic/contacts/all/' + localStorage.getItem('userId')).subscribe((contact) => {
      //////'123 ', contact);
      let contactList = contact;
      contactList = this.sortBy(contact, 'lastMessageOn');
      if (this.contactList != null && this.contactList != undefined) {
        this.contactList.forEach(element => {
          if (element.lastMessageOn == null) {
            element.lastMessageOn = element.createdOn
          }
          contactList = this.sortBy(contact, 'lastMessageOn');
          let index = this.contactList.findIndex((item) => (item.userId === element.userId && item.groupId === element.groupId));
          if (index < 0) {
            this.contactList.push(element);
            var data: any = []
            data = this.duplicate(this.contactList);
            this.contactList = data;
            console.log("newlogs contactList", this.contactList);
          } else {
            Object.assign(this.contactList[index], element);
          }
        });
      }
    });

    this._socket.onMessage('/topic/contacts/all/remain/' + localStorage.getItem('userId')).subscribe((contact) => {
      let contactList = contact;
      //////'topic/contacts/all/remain', contactList);
      if (this.remainingContact != null && this.remainingContact != undefined) {
        contactList.forEach(element => {
          if (element.lastMessageOn == null) {
            element.lastMessageOn = element.createdOn
          }
          contactList = this.sortBy(contact, 'lastMessageOn');
          let index = this.remainingContact.findIndex((item) => (item.userId === element.userId && item.groupId === element.groupId));
          if (index < 0) {
            this.remainingContact.push(element);
            let datas: any;
            datas = this.duplicate(this.remainingContact);
            this.remainingContact = datas

          } else {
            Object.assign(this.remainingContact[index], element);
          }
        });
      }
    });
    this._socket.onMessage('/topic/contacts/' + localStorage.getItem('userId')).subscribe((contact) => {

      //'topic/contacts/test', contact);

      if (this.contactList != null && this.contactList != undefined) {

        this.contactList.forEach((e, index) => {

          if (contact.groupId == e.groupId) {
            // debugger
            e['lastMessagedUserName'] = contact.lastMessagedUserName;
            e['title'] = contact.title;
            e['lastMessageOn'] = contact['lastMessageOn'];
            //////'inside11 values: ',this.userId !=contact.userId, contact);
            //////'inside11 values: ',this.userId, contact.userId, contact);

            if (this.userId != contact.userId && contact.status != 'INACTIVE') {

              var number1: any = 1;
              var sum = parseInt(e['nonSeenCount']) + parseInt(number1);
              e['nonSeenCount'] = sum;

              if (this.SelectedContact.groupId == contact.groupId) {
                e['nonSeenCount'] = 0;
              }
            }

            if (contact.groupType == "USER") {
              var number1: any = 1;
              var sum = parseInt(e['nonSeenCount']) + parseInt(number1);
              e['nonSeenCount'] = sum;
              if (this.SelectedContact.groupId == contact.groupId) {
                e['nonSeenCount'] = 0;
              }

            }
            this.contactList = this.sortBy(this.contactList, 'lastMessageOn');
          }

        });


        let index = this.contactList.findIndex((item) => (item.userId === contact.userId && item.groupId === contact.groupId));
        if (index < 0) {
        } else {
          Object.assign(this.contactList[index], this.contactList[index]);
        }
      }
      this.sortBy(this.contactList, 'lastMessageOn');
      let data: any = {};
      data = this.duplicate(this.contactList);
      this.contactList = data;
    });


    this._socket.onMessage('/topic/newcontacts/' + localStorage.getItem('userId')).subscribe((contact) => {
      //'topic/newcontacts', contact);

      var dateOne = new Date(contact.lastMessageOn); //Year, Month, Date
      var dateTwo = new Date(contact.lastModifiedOn); //Year, Month, Date
      if (dateOne > dateTwo) {
      } else { contact.lastMessageOn = contact.lastModifiedOn; }


      this.contactList.push(contact);
      this.contactList = this.sortBy(this.contactList, 'lastMessageOn');
      let data: any = {};
      data = this.duplicate(this.contactList);
      this.contactList = data;

    });
  }




  messageListscroll(group, currentIndex, pagination) {
    // let groupId = this.aroute.snapshot.queryParamMap.get('groupId');
    // let type = this.aroute.snapshot.queryParamMap.get('type');
    // let refererId = this.aroute.snapshot.queryParamMap.get('refererId');

    let groupId = this.userRedirect.groupId
    let type = this.userRedirect.type
    let refererId = this.userRedirect.refererId

    if (groupId == null && groupId == undefined) {
      groupId = refererId;
    }

    if (this.countAPI < 9) {
      this.countAPI = 0;
    }

    let url = "messages";
    let contact: any = {
      authorId: localStorage.getItem('userId'),
      recipientId: groupId,
      page: this.currentIndex,
      limit: this.pagination,
      date: this.sendMsgres.date,
      searchAfterKey: this.searchAfterKeys,
      messageType: type,

    };


    if (this.countAPI > 9 && this.searchAfterKeys == null) {
      contact.count = this.countAPI
    }


    if (type == "COMMUNITY" || type == "BUSINESS") {
      contact.recipientId = this.sendMsgres.recipientId;
    }

    if (this.searchAfterKeys != null && this.DataLength < 10) {

    } else {
      // this._util.startLoader();
      this._api.messagePageService('POST', url, contact).subscribe(res => {
        // this._util.stopLoader();
        let index = this.messageList.length - 1;
        if (res.data != null && this.searchAfterKeys != res.data.searchAfterKey) {
          this.searchAfterKeys = res.data.searchAfterKey;
          this.DataLength = res.data.messagesList.length;
          this.scrollDir.prepareFor('up');
          let messageListscrolldata = (res.data.messagesList == undefined || res.data.messagesList) == null ? [] : res.data.messagesList;
          if (messageListscrolldata.length != 0) {
            res.data.messagesList.forEach(res => {
              //this.messageList.push(element);

              // if (element.eventType == "ACTION") {
              //   var dates = new Date(element.sentDate);
              //   let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');
              //   element.oldMessage = element.message + " on " + latest_date;
              // }

              if (res.eventType == "ACTION") {
                var dates = new Date(res.sentDate);
                let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');

                var tempMsg: any = [];
                var secondTemMsg: any = [];
                if (res.actionType == "ADDED_TO_NETWORK") {
                  if (res.authorId == this.userId) {
                    tempMsg = " You "
                  } else {
                    tempMsg = res.authorName;
                  }
                  if (res.recipientUserId == this.userId) {
                    secondTemMsg = " You "
                  } else {
                    secondTemMsg = res.recipientName;
                  }
                  res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                }
                else if (res.actionType == "REMOVED_FROM_NETWORK") {
                  if (res.authorId == this.userId) {
                    tempMsg = " You "
                  } else {
                    tempMsg = res.authorName;
                  }
                  if (res.recipientUserId == this.userId) {
                    secondTemMsg = " You "
                  } else {
                    secondTemMsg = res.recipientName;
                  }
                  res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                } else if (res.actionType == "LEFT_NETWORK") {
                  if (res.authorId == this.userId) {
                    tempMsg = " You "
                  } else {
                    tempMsg = res.authorName;
                  }
                  if (res.recipientUserId == this.userId) {
                    secondTemMsg = " You "
                  } else {
                    secondTemMsg = res.recipientName;
                  }
                  res.oldMessage = tempMsg + " left " + " on " + latest_date;
                } else if (res.actionType == "ADDED_TO_TEAM") {
                  if (res.authorId == this.userId) {
                    tempMsg = " You "
                  } else {
                    tempMsg = res.authorName;
                  }
                  if (res.recipientUserId == this.userId) {
                    secondTemMsg = " You "
                  } else {
                    secondTemMsg = res.recipientName;
                  }
                  res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                } else if (res.actionType == "REMOVED_FROM_TEAM") {
                  if (res.authorId == this.userId) {
                    tempMsg = " You "
                  } else {
                    tempMsg = res.authorName;
                  }
                  if (res.recipientUserId == this.userId) {
                    secondTemMsg = " You "
                  } else {
                    secondTemMsg = res.recipientName;
                  }
                  res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                } else if (res.actionType == "LEFT_TEAM") {
                  if (res.authorId == this.userId) {
                    tempMsg = " You "
                  } else {
                    tempMsg = res.authorName;
                  }
                  if (res.recipientUserId == this.userId) {
                    secondTemMsg = " You "
                  } else {
                    secondTemMsg = res.recipientName;
                  }
                  res.oldMessage = tempMsg + " left " + " on " + latest_date;
                } else if (res.actionType == "ADDED_TO_MSG_GRP") {
                  if (res.authorId == this.userId) {
                    tempMsg = " You "
                  } else {
                    tempMsg = res.authorName;
                  }
                  if (res.recipientUserId == this.userId) {
                    secondTemMsg = " You "
                  } else {
                    secondTemMsg = res.recipientName;
                  }
                  res.oldMessage = tempMsg + " added  " + secondTemMsg + " on " + latest_date;
                } else if (res.actionType == "REMOVED_FROM_MSG_GRP") {
                  if (res.authorId == this.userId) {
                    tempMsg = " You "
                  } else {
                    tempMsg = res.authorName;
                  }
                  if (res.recipientUserId == this.userId) {
                    secondTemMsg = " You "
                  } else {
                    secondTemMsg = res.recipientName;
                  }
                  res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                } else if (res.actionType == "LEFT_FROM_MSG_GRP") {

                  if (res.authorId == this.userId) {
                    tempMsg = " You "
                  } else {
                    tempMsg = res.authorName;
                  }
                  if (res.recipientUserId == this.userId) {
                    secondTemMsg = " You "
                  } else {
                    secondTemMsg = res.recipientName;
                  }


                  res.oldMessage = tempMsg + " left " + " on " + latest_date;
                } else if (res.actionType == "ENABLED_RIGHTS") {
                  if (res.authorId == this.userId) {
                    tempMsg = " You "
                  } else {
                    tempMsg = res.authorName;
                  }
                  if (res.recipientUserId == this.userId) {
                    secondTemMsg = " You "
                  } else {
                    secondTemMsg = res.recipientName;
                  }
                  res.oldMessage = tempMsg + " enabled chat rights for " + secondTemMsg + " on " + latest_date;
                } else if (res.actionType == "DISABLED_RIGHTS") {
                  if (res.authorId == this.userId) {
                    tempMsg = " You "
                  } else {
                    tempMsg = res.authorName;
                  }
                  if (res.recipientUserId == this.userId) {
                    secondTemMsg = " You "
                  } else {
                    secondTemMsg = res.recipientName;
                  }
                  res.oldMessage = tempMsg + " disabled  chat rights for " + secondTemMsg + " on " + latest_date;
                }

                else if (this.SelectedContact.groupType == "NETWORK" && res.actionType == "DEACTIVATED") {
                  res.oldMessage = res.message + " on " + latest_date + " No further communication is possible.";
                }

                else if (this.SelectedContact.groupType == "TEAM" && res.actionType == "DEACTIVATED") {
                  res.oldMessage = res.message + " on " + latest_date + " No further communication is possible.";
                }

                else if (this.SelectedContact.groupType == "BUSINESS" && res.actionType == "DEACTIVATED") {
                  res.oldMessage = res.message + " on " + latest_date + " No further communication is possible.";
                }

                else if (this.SelectedContact.groupType == "COMMUNITY" && res.actionType == "DEACTIVATED") {
                  res.oldMessage =  res.message + " on " + latest_date + " No further communication is possible.";
                }

                else {
                  res.oldMessage = res.message + " on " + latest_date;

                }
              }

              if (res.deleted) {
                res.message = "This message was deleted";
                res.attachments = null;
              }


              this.messageList.unshift(res);
            })


            setTimeout(() => {



              if (this.showbottom == false) {

                setTimeout(() => {

                  // element.scrollIntoView({ behavior: "smooth", block: "end", inline: "nearest" });
                  this.showbottom = true;
                  ////"inside",this.showbottom);
                  ////" Id data New Values : ",id);
                  // this.scrollDir.restore();
                  if (this.countAPI > 9) {
                    this.chartDisc.nativeElement.scroll({
                      behavior: "smooth", block: "top", inline: "nearest"
                    });
                    const id = res.data.messagesList[0].messageId;
                    const element = document.getElementById(id);
                    // element.style.scrollPaddingBottom ="100px";

                    //setTimeout(() => {
                    //  const id = res.data.messagesList[3].messageId;
                    // const elementnew = document.getElementById(id);
                    // elementnew.style.scrollPaddingTop = "100px";

                    // },300);
                  }
                }, 400);

              } else {
                this.scrollDir.restore();
              }

            }, 400);
          }
        }

        setTimeout(() => {
          // if( this.countAPI==0){
          // if (this.currentIndex == 0) {
          // this.chartDisc.nativeElement.scroll({
          //   behavior: "smooth", block: "end", inline: "nearest"
          // });
          //  }
          // }
        }, 200);


        if (this.messageList && this.messageList.length > 0) {
          this.updateNonSeenMessage(this.messageList);
        }


      }, err => {
        this._util.stopLoader();
      });
    }


  }
  ngAfterViewChecked() {
    ////this.showbottom )
    // if(this.showbottom){
    // this.scrollToBottom();
    // }
  }
  scrollToBottom(): void {
    try {
      this.scrollDir.restore();
    } catch (err) { }
  }

  duplicate(data) {
    var temp = [];
    var arr = data.filter(function (el) {
      // If it is not a duplicate, return true
      if (temp.indexOf(el.groupId) == -1) {
        temp.push(el.groupId);
        return true;
      }
      return false;
    });
    return arr;
  }




  // thiru changes

  // to get group Data
  getGroupMembers(data, template, openModal) {
    let url = "message/group/getGroupMembers";
    var groupType = ""
    if (this.aroute.snapshot.queryParamMap.get('type') == null) {
      groupType = this.SelectedContact.groupType
    } else {
      groupType = this.aroute.snapshot.queryParamMap.get('type')
    }

    let contact = {
      createdBy: this.SelectedContact.createdBy,
      groupId: this.SelectedContact.groupId,
      groupType: groupType

    };
    this._util.startLoader('msgspinner');
    this._api.messagePageService('POST', url, contact).subscribe(res => {
      this._util.stopLoader('msgspinner');

      if (res) {
        this.groupUserList = res.groupMembers;
        this.TempGroupUserList = res;
        if (openModal != undefined && openModal != null && openModal != '' && openModal) {
          this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'group-msg-modal modal-md' }));
        }
      }
    }, err => {
      this._util.stopLoader();
    });
  }






  changeBusiness(status) {

    var temp = [];
    if (status == "COMMUNITY") {
      this.groupCommunityListMembers.forEach(element => {
        var status;
        if (element.checked == true) {
          status = "ENABLED"
        } else if (element.checked == false) {
          status = "DISABLED"
        }
        temp.push({
          "userId": element.userId,
          "status": status
        });

      });

    } else if (status == "BUSINESS") {
      this.groupBusinessListMembers.forEach(element => {
        var status;
        if (element.checked == true) {
          status = "ENABLED"
        } else if (element.checked == false) {
          status = "DISABLED"
        }
        temp.push({
          "userId": element.userId,
          "status": status
        });

      });
    }


    let url = "message/changeChatStatus";
    let contact = {
      messageContacts: temp,
      groupId: this.SelectedContact.groupId,
    };
    this._util.startLoader('msgspinner');
    this._api.messagePageService('POST', url, contact).subscribe(res => {
      this._util.stopLoader('msgspinner');
      if (res.code == "00000") {
        this.modalRef.hide();
        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Updated Successfully',
          showConfirmButton: false,
          timer: 1500
        })
      }
    }, error => {
      this._util.stopLoader();
    });


  }




  userData(data, template?: TemplateRef<any>, businessGrouptemplate?: TemplateRef<any>, communityGrouptemplate?: TemplateRef<any>, network?: TemplateRef<any>) {

    console.log(data)
    if (this.SelectedContact.groupType == "GROUP" && this.SelectedContact.status == "ACTIVE") {
      this.groupNameshow = data.groupName;
      this.getGroupMembers(data, template, true)
    }
    else if (this.SelectedContact.groupType == "BUSINESS" && this.SelectedContact.status == "ACTIVE") {
      this.searchBusgroupList = ""
      if (this.SelectedContact.adminList[0] == localStorage.getItem('userId')) {
        this.BusinessGrouplist(data, businessGrouptemplate, true);
      } else if (this.SelectedContact.adminList.includes(localStorage.getItem('userId'))) {
        this.BusinessGrouplist(data, businessGrouptemplate, true);
      }
    } else if (this.SelectedContact.groupType == "COMMUNITY" && this.SelectedContact.status == "ACTIVE") {

      this.searchBusgroupList = ""
      if (this.SelectedContact.adminList[0] == localStorage.getItem('userId')) {
        this.communityGroupList(data, businessGrouptemplate, true);
      } else if (this.SelectedContact.adminList.includes(localStorage.getItem('userId'))) {
        this.communityGroupList(data, businessGrouptemplate, true);
      }
    } else if (this.SelectedContact.groupType == "NETWORK" && this.SelectedContact.status == "ACTIVE" || this.SelectedContact.groupType == "TEAM" && this.SelectedContact.status == "ACTIVE") {
      this.groupNameshow = data.groupName;
      // this.getTeamMembers(data, network, true);
      this.getGroupMembers(data, template, true)



    }
  }


  addUserToBusiness(event: any, userId: any, item) {
    if (event.target.checked) {
      item.checked = true
      this.groupDataBusiness.contacts.push(item.userId);
    } else {
      item.checked = false
      for (var i = 0; i < this.groupDataBusiness.contacts.length; i++) {
        if (!item.checked && this.groupDataBusiness.contacts[i] == item.userId) {
          if (this.groupDataBusiness.contacts.length != 0) {
            this.groupDataBusiness.contacts.splice(i, 1);
          }
        }
      }
    }
  }

  addUserTocommunity(event: any, userId: any, item) {
    if (event.target.checked) {
      item.checked = true
      this.groupDataCommunity.contacts.push(item.userId);
    } else {
      item.checked = false;
      for (var i = 0; i < this.groupDataCommunity.contacts.length; i++) {
        if (!item.checked && this.groupDataCommunity.contacts[i] == item.userId) {
          if (this.groupDataCommunity.contacts.length != 0) {
            this.groupDataCommunity.contacts.splice(i, 1);
          }
        }
      }
    }
  }

  BusinessGrouplist(data, template, openModal) {
    let url = "message/group/getGroupMembers";
    let contact = {
      createdBy: this.SelectedContact.createdBy,
      groupType: this.SelectedContact.groupType,
      groupId: this.SelectedContact.groupId,
    };
    this.groupDataBusiness.contacts = []
    this._util.startLoader('msgspinner');
    this._api.messagePageService('POST', url, contact).subscribe(res => {
      this._util.stopLoader('msgspinner');
      if (res) {
        res.groupMembers.forEach(element => {
          element.userName = element.firstName + " " + element.lastName;
          if (element.profileStatus == "ENABLED" || element.profileStatus == "NEW") {
            element.checked = true;
            this.groupDataBusiness.contacts.push(element.userId);
            if (element.superAdmin == true) {
              element.disable = true;
            } else if (element.superAdmin == false) {
              element.disable = false;
            }
            if (this.SelectedContact.adminList[0] != localStorage.getItem('userId') && element.superAdmin == false) {
              element.disable = true;
            }

          }

          else if (element.profileStatus == "DISABLED") {
            element.checked = false;
            element.disable = true;
            if (this.SelectedContact.adminList[0] == localStorage.getItem('userId')) {
              element.disable = false;
            }


          }

        });

        this.groupBusinessListMembers = res.groupMembers;
        this.tempBusinessList = res.groupMembers;
        if (openModal != undefined && openModal != null && openModal != '' && openModal) {
          this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'group-msg-modal modal-md' }));
        }
      }
    }, err => {
      this._util.stopLoader();
    });
  }



  communityGroupList(data, template, openModal) {
    let url = "message/group/getGroupMembers";
    let contact = {
      createdBy: this.SelectedContact.createdBy,
      groupType: this.SelectedContact.groupType,
      groupId: this.SelectedContact.groupId,
    };
    this.groupDataCommunity.contacts = [];
    this._util.startLoader('msgspinner');
    this._api.messagePageService('POST', url, contact).subscribe(res => {
      this._util.stopLoader('msgspinner');
      if (res) {
        res.groupMembers.forEach(element => {
          element.userName = element.firstName + " " + element.lastName;
          if (element.profileStatus == "ENABLED" || element.profileStatus == "NEW") {
            element.checked = true;
            this.groupDataCommunity.contacts.push(element.userId);
            if (element.superAdmin == true) {
              element.disable = true;
            } else if (element.superAdmin == false) {
              element.disable = false;
            }
            if (this.SelectedContact.adminList[0] != localStorage.getItem('userId') && element.superAdmin == false) {
              element.disable = true;
            }

          }
          else if (element.profileStatus == "DISABLED") {
            element.checked = false;
            element.disable = true;
            if (this.SelectedContact.adminList[0] == localStorage.getItem('userId')) {
              element.disable = false;
            }
          }

        });

        this.groupCommunityListMembers = res.groupMembers;
        this.tempCommunityList = res.groupMembers;
        if (openModal != undefined && openModal != null && openModal != '' && openModal) {
          this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'group-msg-modal modal-md' }));
        }
      }
    }, err => {
      this._util.stopLoader();
    });
  }





  deletechatConfirm(SelectedContact) {
    let datas: any = {};
    datas.userId = localStorage.getItem('userId')
    datas.groupType = this.SelectedContact.groupType;
    datas.groupId = this.SelectedContact.groupId;
    datas.refererId = this.SelectedContact.refererId;

    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: "btn btn-success",
        cancelButton: "btn btn-danger",
      },
      buttonsStyling: false,
    });
    swalWithBootstrapButtons.fire({
      // title: 'Are you sure?',
      title: "Are you sure want to delete chat history?",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes',
      cancelButtonText: 'No',
      reverseButtons: true,
      allowOutsideClick: false
    }).then((result) => {
      if (result.isConfirmed) {
        this.deleteAPIfunction()
      }
    })
  }

  deleteAPIfunction() {
    let datas: any = {};
    datas.userId = localStorage.getItem('userId')
    datas.groupType = this.SelectedContact.groupType;
    datas.groupId = this.SelectedContact.groupId;
    datas.refererId = this.SelectedContact.refererId;

    this._util.startLoader('msgspinner');
    this._api.create("message/deleteChat", datas).subscribe((res) => {
      this._util.stopLoader('msgspinner');
      if (res.code == "00000") {
        // this.route.navigate(['/message']);
        // this.SelectedContact = {};
        console.log("this.SelectedContact")
        console.log(this.SelectedContact)
        // this.reloadcontact()
        this.ngOnInit()

      }
    }, err => {
      this._util.stopLoader();
      if (err.status == 500) {
        this._util.stopLoader();
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: 'Something went wrong while deleting chats. Please, try again later.',
          showDenyButton: false,
          confirmButtonText: `ok`,
        })
      }
    })
  }


  deleteChat(SelectedContact) {
    let datas: any = {};
    datas.userId = localStorage.getItem('userId')
    datas.groupType = this.SelectedContact.groupType;
    datas.groupId = this.SelectedContact.groupId;

    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: "btn btn-success",
        cancelButton: "btn btn-danger",
      },
      buttonsStyling: false,
    });
    swalWithBootstrapButtons.fire({
      // title: 'Are you sure?',
      title: "Do you want to delete Chat history?",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes',
      cancelButtonText: 'No',
      reverseButtons: true,
      allowOutsideClick: false,
    }).then((result) => {
      if (result.isConfirmed) {
        // this._util.startLoader('msgspinner');
        // this._api.create("message/deleteChat", datas).subscribe((res) => {
        //   if (res.code == '00000') {
        //     this.route.navigate(['/message']);
        //   }
        // })
        this.deletechatConfirm(this.SelectedContact)
      }
    })
  }
  onsearch(searchtext) {

    if (searchtext != '') {
      searchtext = searchtext.trim().toLowerCase();
      this.newContactList = this.tempNewContactList;
      this.newuserGroup = this.tempNewuserGroup;
      this.newContactList = this.filterByString(this.newContactList, searchtext);
      this.page = 1;
      if (this.newContactList.length == 0) {
        this.paginationFlag = false;
      } else if (this.newContactList.length != 0) {
        this.paginationFlag = true;
      }
    } else {
      this.newContactList = this.tempNewContactList;
      this.paginationFlag = true;

    }
  }

  onsearchGroupmember(searchtext) {

    if (searchtext != '') {
      searchtext = searchtext.trim().toLowerCase();
      this.newuserGroup = this.tempNewuserGroup;
      this.newuserGroup = this.filterByStringGroupName(this.newuserGroup, searchtext);
      this.page = 1;
      if (this.newuserGroup.length == 0) {
        this.paginationFlag = false;
      } else if (this.newuserGroup.length != 0) {
        this.paginationFlag = true;
      }
    } else {
      this.newuserGroup = this.tempNewuserGroup;
      this.paginationFlag = true;
    }
  }



  onsearchnetworkmember(searchtext) {

    if (searchtext != '') {
      searchtext = searchtext.trim().toLowerCase();
      this.groupUserList = this.TempGroupUserList.groupMembers;
      this.groupUserList = this.filterByStringNetwork(this.groupUserList, searchtext);
      this.page = 1;

      if (this.groupUserList.length == 0) {
        this.paginationFlag = false;
      } else if (this.groupUserList.length != 0) {
        this.paginationFlag = true;
      }

    } else {
      this.groupUserList = this.TempGroupUserList.groupMembers;
      this.paginationFlag = true;
    }
  }

  onsearchMsg(searchtext) {

    if (searchtext != '') {
      searchtext = searchtext.trim().toLowerCase();
      this.groupBusinessListMembers = this.tempBusinessList;
      this.groupBusinessListMembers = this.filterByStringbybusiness(this.groupBusinessListMembers, searchtext);
      this.page = 1;
      if (this.groupBusinessListMembers.length == 0) {
        this.paginationFlag = false;
      } else if (this.groupBusinessListMembers.length != 0) {
        this.paginationFlag = true;
        ;
      }
    } else {
      this.groupBusinessListMembers = this.tempBusinessList;
      this.paginationFlag = true;

    }
    //////this.groupBusinessListMembers)
    // this.groupUserList = this.filterByStringbybusiness(this.groupUserList, searchtext);
    //////this.groupBusinessListMembers)
  }


  onsearchMsgCommunity(searchtext) {
    if (searchtext != '') {
      searchtext = searchtext.trim().toLowerCase();
      this.groupCommunityListMembers = this.tempCommunityList;
      this.groupCommunityListMembers = this.filterByStringbybusiness(this.groupCommunityListMembers, searchtext);
      this.page = 1;

      if (this.groupCommunityListMembers.length == 0) {
        this.paginationFlag = false;
      } else if (this.groupCommunityListMembers.length != 0) {
        this.paginationFlag = true;
      }
    } else {
      this.groupCommunityListMembers = this.tempCommunityList;
      this.paginationFlag = true;
    }
  }



  filterByStringbybusiness(data, s) {
    //////data)]

    data.forEach(element => {
      element.userName = "";
      element.userName = element.firstName + " " + element.lastName;
    });

    return data.filter(e => e.userName.toLowerCase().includes(s))
      .sort((a, b) => a.userName.toLowerCase().includes(s) && !b.userName.toLowerCase().includes(s) ? -1 : b.userName.toLowerCase().includes(s) && !a.userName.toLowerCase().includes(s) ? 1 : 0);
  }

  filterByString(data, s) {

    return data.filter(e => e.groupName.toLowerCase().includes(s))
      .sort((a, b) => a.groupName.toLowerCase().includes(s) && !b.groupName.toLowerCase().includes(s) ? -1 : b.groupName.toLowerCase().includes(s) && !a.groupName.toLowerCase().includes(s) ? 1 : 0);
  }

  filterByStringGroupName(data, s) {

    data.forEach(element => {
      element.userName = "";
      element.userName = element.firstName + " " + element.lastName;
    });

    return data.filter(e => e.userName.toLowerCase().includes(s))
      .sort((a, b) => a.userName.toLowerCase().includes(s) && !b.userName.toLowerCase().includes(s) ? -1 : b.userName.toLowerCase().includes(s) && !a.userName.toLowerCase().includes(s) ? 1 : 0);
  }


  filterByStringNetwork(data, s) {
    data.forEach(element => {
      element.userName = "";
      element.userName = element.firstName + " " + element.lastName;
    });

    return data.filter(e => e.userName.toLowerCase().includes(s))
      .sort((a, b) => a.userName.toLowerCase().includes(s) && !b.userName.toLowerCase().includes(s) ? -1 : b.userName.toLowerCase().includes(s) && !a.userName.toLowerCase().includes(s) ? 1 : 0);
  }




  addMembers(model1, model2) {


  }
  addcontact(templates?: TemplateRef<any>, businesstemplates?: TemplateRef<any>, communityMembertemplate?: TemplateRef<any>) {

    if (this.SelectedContact.groupType == 'GROUP') {
      let url = "message/group/getMembersForGroup";
      let contact = {
        createdBy: localStorage.getItem('userId'),
        groupId: this.SelectedContact.groupId,

      };
      this._util.startLoader('msgspinner');
      this._api.messagePageService('POST', url, contact).subscribe(res => {
        this._util.stopLoader('msgspinner');
        if (res) {
          res.connections.forEach(element => {
            element.checked = false;
          });
          this.newuserGroup = res.connections;
          this.tempNewuserGroup = res.connections;
          if (res.connections.length != 0) {
            // this.modalRef.hide();
            this.modalRefAddgroup = this.modalService.show(templates, Object.assign({}, { class: 'group-msg-modal modal-md' }));
          } else {
            Swal.fire({
              position: 'center',
              icon: 'info',
              title: "New user unavailable",
              text: 'Please connect with the user first and then try again.',
              showConfirmButton: false,
              timer: 5000
            })
          }

        }
      })
    } else if (this.SelectedContact.groupType == 'BUSINESS') {
      this.BusinessGrouplist("data", businesstemplates, true);
    } else if (this.SelectedContact.groupType == 'COMMUNITY') {
      this.communityGroupList("data", communityMembertemplate, true);
    }




  }

  closeAdduserModel() {
    this.modalRefAddgroup.hide();
    this.page = 1;
    this.paginationFlag = true;
  }

  onCheckboxChange(option, event, data) {
    if (event.target.checked) {
      option.checked = true
      this.addusers.push(option.userId);
    } else {
      option.checked = false
      for (var i = 0; i < this.addusers.length; i++) {
        if (!option.checked && this.addusers[i] == option.userId) {
          this.addusers.splice(i, 1);
        }
      }
    }
  }


  exitGroup(name) {
    var user = localStorage.getItem('userId')
    if (name == 'user') {
      this.leftUser(user)
    } else if (name = 'owner') {
      this.deleteGroup()
    }
  }

  // Delete group by owner

  deleteGroup() {
    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: "btn btn-success",
        cancelButton: "btn btn-danger",
      },
      buttonsStyling: false,
    });
    swalWithBootstrapButtons.fire({
      // title: 'Are you sure?',
      title: "Are you sure you want to delete this group?",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes',
      cancelButtonText: 'No',
      reverseButtons: true
    }).then((result) => {
      if (result.isConfirmed) {

        let url = "message/group/delete/" + this.SelectedContact.groupId;
        this._util.startLoader('msgspinner');
        this._api.messagePageService('DELETE', url).subscribe(res => {
          this._util.stopLoader('msgspinner');
          if (res.code == "00000") {
            Swal.fire({
              position: 'center',
              icon: 'success',
              title: "Group deleted successfully",
              showConfirmButton: false,
              timer: 3000
            });

            this.messageStatus = MESSAGESTATUS.EMPTY;
            const queryParams: Params = { groupId: '', groupType: '', refererId: '' };
            //  this.route.navigate([],{
            //     relativeTo: this.aroute,
            //     queryParams: queryParams,
            //     queryParamsHandling: 'merge',
            //   });


            this.deleteAPIfunction();
            // this.reloadcontact();
            // const index = this.contactList.findIndex(x => x.groupId === this.SelectedContact.groupId);
            // if (index !== undefined) this.contactList.splice(index, 1);
            this.SelectedContact = {};
            console.log("this.SelectedContact")
            console.log(this.SelectedContact)
            this.closeNewContactModal();
            this._location.replaceState('/message');
            this.route.routeReuseStrategy.shouldReuseRoute = () => false;
            this.redirect = false;

            // this.route.routeReuseStrategy.shouldReuseRoute = () => false;
          }
          else if (res.code == "99999") {
            Swal.fire({
              position: 'center',
              icon: 'error',
              title: "Oops...",
              text: 'Group could not be deleted now. Please try again later later.',
              showConfirmButton: false,
              timer: 4000
            })
          }
        })



      }
    })



  }



  // Add new user
  addUser() {
    var temp = [...new Set(this.addusers)];
    this.addusers = temp;
    let url = "message/group/contact/add";
    let contact = {
      contacts: this.addusers,
      groupId: this.SelectedContact.groupId,
    };
    if (temp.length != 0) {
      this._util.startLoader('msgspinner');
      this._api.messagePageService('POST', url, contact).subscribe(res => {
        this._util.stopLoader('msgspinner');
        if (res && res != null && res != undefined) {
          if (res.code == "00000") {
            this.modalRefAddgroup.hide();
            this.modalRef.hide();
            this.addusers = []
            this.queryParamBasedMethod()
            Swal.fire({
              position: 'center',
              icon: 'success',
              title: 'Add user',
              text: "User added successfully",
              showConfirmButton: false,
              timer: 3000
            })
          }
        }
      }, err => {
        this._util.stopLoader();

      })
    } else {
      Swal.fire({
        position: 'center',
        icon: 'info',
        title: "Select user",
        text: 'Please select an user to add',
        showConfirmButton: false,
        timer: 3000
      })
    }

  }

  // Remove user from  group
  removeGroupMember(item) {
    var temp = []
    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: "btn btn-success",
        cancelButton: "btn btn-danger",
      },
      buttonsStyling: false,
    });
    swalWithBootstrapButtons.fire({
      title: 'Are you sure you want to remove this user?',
      // text: "You won't be able to remove this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes',
      cancelButtonText: 'No',
      reverseButtons: true
    }).then((result) => {
      if (result.isConfirmed) {
        temp.push(item.userId)
        let url = "message/group/contact/remove";
        let contact = {
          contacts: temp,
          status: "REVOKED",
          groupId: this.SelectedContact.groupId,
        };
        this._util.startLoader('msgspinner');
        this._api.messagePageService('POST', url, contact).subscribe(res => {
          this._util.stopLoader('msgspinner');
          if (res && res != null && res != undefined) {
            if (res.code == "00000") {
              Swal.fire({
                position: 'center',
                icon: 'success',
                title: 'User removed successfully',
                showConfirmButton: false,
                timer: 1500
              })

              this.SelectedContact.nonSeenCount = res.status;
              // this.closeOpenedMsg();
              this.closeNewContactModal()
              // this.getAllContacts();
              let groupId = this.aroute.snapshot.queryParamMap.get('groupId');
              let type = this.aroute.snapshot.queryParamMap.get('type');
              let refererId = this.aroute.snapshot.queryParamMap.get('refererId');
              let d = {
                groupId: this.SelectedContact.groupId,
                type: 'GROUP'
              };
              this.route.navigate(['/message'], { queryParams: d });
              //  this.closeAdduserModel()
            }

          }
        }, err => {
          this._util.stopLoader();

        })

      }
    })
  }

  leftUser(item) {
    var temp = []
    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: "btn btn-success",
        cancelButton: "btn btn-danger",
      },
      buttonsStyling: false,
    });
    swalWithBootstrapButtons.fire({
      title: 'Are you sure you want to exit?',
      // text: "You won't be able to remove this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes',
      cancelButtonText: 'No',
      reverseButtons: true
    }).then((result) => {
      if (result.isConfirmed) {
        temp.push(item)
        let url = "message/group/contact/remove";
        let contact = {
          contacts: temp,
          status: "LEFT",
          groupId: this.SelectedContact.groupId,
        };
        this._util.startLoader('msgspinner');
        this._api.messagePageService('POST', url, contact).subscribe(res => {
          this._util.stopLoader('msgspinner');
          if (res && res != null && res != undefined) {
            if (res.code == "00000") {
              this.deleteAPIfunction();
              Swal.fire({
                position: 'center',
                icon: 'success',
                title: 'User left Successfully',
                showConfirmButton: false,
                timer: 1500
              })


              this.SelectedContact.status = "INACTIVE"
              // this.closeOpenedMsg();
              // this.route.navigate(['/message']);
              // this.SelectedContact = {};
              console.log("this.SelectedContact")
              console.log(this.SelectedContact)
              // const index = this.contactList.findIndex(x => x.groupId === this.SelectedContact.groupId);
              // if (index !== undefined) this.contactList.splice(index, 1);
              this.closeNewContactModal()
              // this.getAllContacts();
              // let groupId = this.aroute.snapshot.queryParamMap.get('groupId');
              // let type = this.aroute.snapshot.queryParamMap.get('type');
              // let refererId = this.aroute.snapshot.queryParamMap.get('refererId');
              // let d = {
              //   groupId: groupId,
              //   type: 'GROUP'
              // };
              // this.route.navigate(['/message'], { queryParams: d });
              // this.route.navigate(['/message']);
              // this.closeAdduserModel()
            }

          }
        }, err => {
          this._util.stopLoader();

        })

      }
    })
  }



  getSocketMessage(message: any) {
    ////"changes test" ,message)
    let _this = this;
    _this.constructMsg(_this, JSON.parse(message.body));
  }

  private constructMsg(that: any, msg: any) {
    this.duplicate(this.messageList);

    if (msg.enableDelete == true && msg.authorId == this.userId) {
      msg.enableDelete == true;
    } else if (msg.enableDelete == true && msg.authorId != this.userId) {
      msg.enableDelete == false;
    }

    if (msg.action == "UPDATE") {
      this.messageList.forEach(element => {
        if (element.messageId == msg.messageId) {
          element.message = msg.message;
          if (msg.deleted) {
            element.message = "This message was deleted";
            element.attachments = null;
          }
          if (msg.edited) {
            msg.enableDelete == true;
            element.attachments = msg.attachments;
          }
        }
      });
    }





    this.messageList.push(msg);
    this.messageList = this.sortByMsg(this.messageList, 'lastMessageOn');

    ////'this.messageList,', this.messageList)
    setTimeout(() => {
      that.chartDisc.nativeElement.scroll({
        top: that.chartDisc.nativeElement.scrollHeight,
        left: 0,
        behavior: 'smooth'
      });
    }, 200);
    let update = [];
    update.push(msg);
    that.updateNonSeenMessage(update);

    this.contactList.forEach((e, index) => {
      if (this.messageList[0].recipientId == e.groupId) {
        e['nonSeenCount'] = 0;
        this.contactList = this.sortBy(this.contactList, 'lastMessageOn');
      }
    });


  }

  private getNewContact(openModal?: any, template?: TemplateRef<any>) {
    let url = "message/new/contact/" + this.userId;
    this._util.startLoader('msgspinner');
    this._api.messagePageService('GET', url).subscribe(res => {
      this._util.stopLoader('msgspinner');
      if (res && res.length != 0) {
        res.forEach(element => {
          element.checked = false;
        });
        this.newContactList = res;
        this.tempNewContactList = res;
        if (openModal != undefined && openModal != null && openModal != '' && openModal && this.newContactList.length != 0) {
          this.modalRef = this.modalService.show(template, Object.assign({}, { class: 'group-msg-modal modal-md' }));
        } else {
          Swal.fire('', 'No user Connection', 'error');
        }
      } else {
        Swal.fire('', 'No user Connection', 'error');
      }
    })
  }

  sendMessage() {

    // let type = this.aroute.snapshot.queryParamMap.get('type');
    // let groupId = this.aroute.snapshot.queryParamMap.get('groupId');
    // let refererId = this.aroute.snapshot.queryParamMap.get('refererId');
    let groupId = this.userRedirect.groupId
    let type = this.userRedirect.type
    let refererId = this.userRedirect.refererId
    this.searchData = {};
    if (this.sendMessageData['message'] === undefined || this.sendMessageData['message'] == null ||
      this.sendMessageData['message'].replace(/\s/g, "") === "") {
      return;
    }

    if (groupId == null && groupId == undefined && type == "NETWORK" || groupId == null && groupId == undefined && type == "TEAM") {
      groupId = refererId;
    }


    this.sendMessageData['authorId'] = this.userId;
    this.sendMessageData['recipientId'] = groupId;
    this.sendMessageData['userType'] = type.toUpperCase();
    this.sendMessageData['messageType'] = type.toUpperCase();
    this.sendMessageData['enableDelete'] = true;
    this.sendMessageData['refererId'] = refererId;

    const url = 'message/send';
    //this.searchAfterKeys=null
    if (!this.editorDisabled) {
      this.editorDisabled = true;
      this._util.startLoader('msgspinner');
      this._api.messagePageService('POST', url, this.sendMessageData).subscribe(res => {
        this._util.stopLoader('msgspinner');
        this.editorDisabled = false;
        if (res) {
          if (res.code === "00000") {
            this.sendMsgres.recipientId = this.sendMessageData.recipientId;

            if (this.userRedirect.groupId == null && this.userRedirect.groupId == undefined && (type == "BUSINESS" || type == "COMMUNITY")) {
              this.userRedirect.groupId = res.recipientId;
              this.SelectedContact.groupId = res.recipientId;
              this._socket.onMessage('/topic/message/' + res.recipientId).subscribe(res => {

                ////this.SelectedContact.status)


                if (type == "BUSINESS" || type == "COMMUNITY") {
                  //if (res.recipientId == this.SelectedContact.groupId) {
                  // if (res.eventType == "ACTION") {
                  //   var dates = new Date(res.sentDate);
                  //   let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');
                  //   res.oldMessage = res.message + " on " + latest_date;
                  // }

                  if (res.eventType == "ACTION") {
                    var dates = new Date(res.sentDate);
                    let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');

                    var tempMsg: any = [];
                    var secondTemMsg: any = [];
                    if (res.actionType == "ADDED_TO_NETWORK") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                    }
                    else if (res.actionType == "REMOVED_FROM_NETWORK") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "LEFT_NETWORK") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " left " + " on " + latest_date;
                    } else if (res.actionType == "ADDED_TO_TEAM") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                    } else if (res.actionType == "REMOVED_FROM_TEAM") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "LEFT_TEAM") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " left " + " on " + latest_date;
                    } else if (res.actionType == "ADDED_TO_MSG_GRP") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " added " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "REMOVED_FROM_MSG_GRP") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "LEFT_FROM_MSG_GRP") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " left " + " on " + latest_date;
                    } else if (res.actionType == "ENABLED_RIGHTS") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " enabled chat rights for " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "DISABLED_RIGHTS") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " disabled  chat rights for " + secondTemMsg + " on " + latest_date;
                    }

                    else if (this.SelectedContact.groupType == "NETWORK" && res.actionType == "DEACTIVATED") {
                      res.oldMessage = res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                    }

                    else if (this.SelectedContact.groupType == "TEAM" && res.actionType == "DEACTIVATED") {
                      res.oldMessage =  res.oldMessage =res.message+" on " + latest_date + " No further communication is possible.";
                    }

                    else if (this.SelectedContact.groupType == "BUSINESS" && res.actionType == "DEACTIVATED") {
                      res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                    }

                    else if (this.SelectedContact.groupType == "COMMUNITY" && res.actionType == "DEACTIVATED") {
                      res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                    }

                    else {
                      res.oldMessage = res.message + " on " + latest_date;

                    }
                  }

                  //" SEND MSG BUSINESS message", res)

                  this.constructMsg(this, res);
                  // }
                }
              });
            }
            this.sendMessageData = {};
            if (this.contactList != undefined && this.contactList != null) {
              this.contactList.forEach((e, index) => {
                if (this.sendMsgres.recipientId == e.groupId) {
                  if (res.sentDate == null) {
                    e['lastMessageOn'] = new Date();
                  } else {
                    e['lastMessageOn'] = res.sentDate;
                  }
                  Object.assign(this.contactList[index], e);
                  // //this.contactList)
                  this.contactList = this.sortBy(this.contactList, 'lastMessageOn');
                }
              });
            }


            this.summernote.writeValue('');
            this.config = {
              focus: true,
              placeholder: 'Enter message',
              toolbar: []
            };
            this.currentIndex = 0;
            //this.messageList=[];
            this.sendMsgres.recipientId = res.recipientId;

            if (type == "USER") {
              res.enableDelete = true;
            }
            this.messageList.push(res);
            this.messageList = this.sortByMsg(this.messageList, 'lastMessageOn');


            //"messageList ", this.messageList);

            this.chartDisc.nativeElement.scroll({
              top: this.chartDisc.nativeElement.scrollHeight,
              left: 0,
              behavior: 'smooth'
            });

            this.intervalExistSeen = true;
            this.intervalNonSeenMessage = true;

            setTimeout(() => {
              const id = res.messageId;
              const element = document.getElementById(id);
              element.scrollIntoView({ behavior: "smooth", block: "end", inline: "nearest" });
              this.scrollDir.restore();
            }, 400);



          }
        }

      }, err => {
        this._util.stopLoader();
      });
    } else {
      this.summernote.writeValue('');
    }
  }




  delete(item) {
    var url = "deleteMessages";
    var temp = [];
    temp.push(item);

    this._util.startLoader('msgspinner');
    this._api.messagePageService('POST', url, temp).subscribe(res => {
      this._util.stopLoader('msgspinner');
      this.messageList.forEach(element => {
        if (element.messageId == item.messageId) {
          element.message = "This message was deleted";
          element.enableDelete = false;
          element.attachments = null;
        }
      });
    }, err => {
      this._util.stopLoader();
    })
  }

  edit(item) {
    this.editMessage = true;
    this.editValue = item;
    this.editValueEditImage = item;
    this.sendMessageData['message'] = item.message;
    //item)
    if (item.attachements == true) {
      this.imageAttachmentEdit = true;
      item.attachements = false;
      this.EdituploadFiles = item.attachments;
      item.attachments.forEach(element => {
        element.edit = true;
        element.t = element.attachmentType;
      });
      this.uploadFiles = item.attachments;
      this.editMessage = false;

    }
  }

  updatemediaApi() {
    //"data1 as", this.editValue);
    //"update files", this.uploadFiles);
    //this.removeElement);

    this.editValueEditImage['enableDelete'] = true;
    this.editValueEditImage['attachements'] = true;

    this.editValueEditImage['message'] = this.sendMessageData['message'];
    this.FormData = new FormData();
    this.uploadFiles.forEach(element => {
      if (element.file != undefined) {
        this.FormData.append("file", element.file);
      }
    });


    this.FormData.append("removedAttachments", new Blob([JSON.stringify(this.removeElement)], {
      type: "application/json"
    }));


    if (this.uploadFiles.length == 0 && this.editValue.attachments.length == 0) {
      this.editValueEditImage['attachment'] = false;
    }

    this.FormData.append('message', new Blob([JSON.stringify(this.editValueEditImage)],
      {
        type: "application/json"
      }));


    var url = "updateEditedMessage";
    this._util.startLoader('msgspinner');
    this._api.messagePageService('POST', url, this.FormData).subscribe(res => {
      this._util.stopLoader('msgspinner');
      this.editMessage = false;
      if (res.code == "00000") {
        this.messageList.forEach(element => {
          if (element.messageId == this.editValue.messageId) {
            element.message = this.editValue.message;
            element.attachments = res.data.updatedMessage.attachments;
            this.summernote.writeValue('');
            this.editValue = "";
            element.enableDelete = true;
            this.uploadFiles = [];
            this.removeElement = [];
            this.imageAttachmentEdit = false;
            this.sendMessageData['message'] = "";
            this.attachment = false;
          }
        });
      }
    }, err => {
      this._util.stopLoader();

    })
  }

  updateMsg() {
    var url = "updateEditedMessage";
    this._util.startLoader('msgspinner');
    this.editValue.message = this.sendMessageData['message'];
    this.FormData = new FormData();

    this.FormData.append('message', new Blob([JSON.stringify(this.editValue)],
      {
        type: "application/json"
      }));
    this._api.messagePageService('POST', url, this.FormData).subscribe(res => {
      this._util.stopLoader('msgspinner');
      this.editMessage = false;
      this.messageList.forEach(element => {
        if (element.messageId == this.editValue.messageId) {
          element.message = this.editValue.message;;
          this.summernote.writeValue('');
          this.editValue = "";
          element.enableDelete = true;
        }
      });
    }, err => {
      this._util.stopLoader();

    })
  }



  reloadcontact() {
    let userId = localStorage.getItem('userId');
    let url = "message/contact/" + userId;
    this.searchAfterKeys = null;
    this._api.messagePageService('GET', url).subscribe(res => {
      if (res) {
        let contactList = res;
        if (contactList != undefined && contactList != null) {
          contactList.forEach(e => {
            let index = this.contactList.findIndex((item) => (item.userId === e.userId && item.groupId === e.groupId));
            if (index < 0) {
            } else {
              Object.assign(this.contactList[index], e);
            }

            if (e.lastMessageOn == null) {
              e.lastMessageOn = e.createdOn
            }
            this.contactList = this.sortBy(this.contactList, 'lastMessageOn');
          });
        }


        // let groupId = this.aroute.snapshot.queryParamMap.get('groupId');
        // let type = this.aroute.snapshot.queryParamMap.get('type');
        // let refererId = this.aroute.snapshot.queryParamMap.get('refererId');

        let groupId = this.userRedirect.groupId
        let type = this.userRedirect.type
        let refererId = this.userRedirect.refererId

        var newRefererId;
        if (refererId == null) {
          newRefererId = groupId;
        } else if (refererId != null) {
          newRefererId = refererId
        }

        if (type && type != null && type != '') {
          let contact = {
            userId: localStorage.getItem('userId'),
            groupType: type.toUpperCase(),
            groupId: groupId,
            refererId: newRefererId,
            messageType: type.toUpperCase(),
          };
          let url = "message/contact/exist";
          this.currentIndex = 0;
          this._api.messagePageService('POST', url, contact).subscribe(res => {
            if (res && res['code'] == '00000') {
              let d = res;
              this.sendMsgres.date = data;

              if (d['pageAdmin']) {
                this.route.navigate(['/message']);
                return;
              }
              if (d['exist']) {

                if (res.groupStatus == "INACTIVE") {
                  Swal.fire('', 'The ' + res.groupType.toLowerCase() + ' has been deleted', 'error');
                }

                if ((type === 'COMMUNITY' || type === 'BUSINESS') && (groupId == undefined || groupId == null || groupId == '')) {
                  let l = {
                    groupId: d['groupId'],
                    type: type,
                    refererId: refererId
                  };
                  this.route.navigate(['/message'], { queryParams: l });
                }
                let index = this.contactList.findIndex((item) => item.groupId === d.groupId);
                if (index < 0) {

                  this.contactList.push(d);
                  var data: any = []
                  data = this.duplicate(this.contactList);
                  this.contactList = data;
                }
                // this.messageList = (res['messageList'] == undefined || res['messageList']) == null ? [] : res['messageList'];
                this.messageList = []
                this.SelectedContact = res;
                if(res.status=="GROUP_INACTIVE"){
                  this.SelectedContact.status = "INACTIVE";
                }
                console.log("this.SelectedContact")
                console.log(this.SelectedContact)
                this.sendMsgres.recipientId = d['groupId'];

                this.messageListscroll(d['groupId'], this.currentIndex, this.pagination);

              }

            }
          })

        }

      }
    })
  }

  sendMessageWithAttachment() {
    //  let groupId = this.aroute.snapshot.queryParamMap.get('groupId');
    // let type = this.aroute.snapshot.queryParamMap.get('type');
    // let refererId = this.aroute.snapshot.queryParamMap.get('refererId');
    this.searchData = {};
    let groupId = this.userRedirect.groupId
    let type = this.userRedirect.type
    let refererId = this.userRedirect.refererId

    this.sendMessageData['authorId'] = this.userId;
    this.sendMessageData['recipientId'] = groupId;
    this.sendMessageData['userType'] = type.toUpperCase();
    this.sendMessageData['messageType'] = type.toUpperCase();
    this.sendMessageData['refererId'] = refererId;
    this.sendMessageData['enableDelete'] = true;
    this.FormData = new FormData();

    this.uploadFiles.forEach(element => {
      this.FormData.append('file', element.file);
    });


    this.FormData.append('message', new Blob([JSON.stringify(this.sendMessageData)],
      {
        type: "application/json"
      }));


    const url = 'message/send/upload';
    this.searchAfterKeys = null;
    this._util.startLoader('msgspinner');
    this._api.messagePageService('POST', url, this.FormData).subscribe(res => {
      this._util.stopLoader('msgspinner');
      if (res) {
        if (res['code'] === '00000') {
          this.attachment = false;
          this.sendMsgres.recipientId = this.sendMessageData.recipientId;
          this.sendMessageData = {};
          this.uploadFiles = [];
          this.currentIndex = 0;
          // this.messageList = [];
          // this.messageListscroll(null, this.currentIndex, this.pagination);

          if (this.contactList != undefined && this.contactList != null) {
            this.contactList.forEach((e, index) => {
              if (this.sendMsgres.recipientId == e.groupId) {
                e['lastMessageOn'] = res.sentDate;
                Object.assign(this.contactList[index], e);
                //////this.contactList)
                this.contactList = this.sortBy(this.contactList, 'lastMessageOn');
              }
            });
          }

          this.messageList.push(res);
          this.messageList = this.sortByMsg(this.messageList, 'lastMessageOn');

          setTimeout(() => {
            const id = res.messageId;
            const element = document.getElementById(id);
            element.scrollIntoView({ behavior: "smooth", block: "end", inline: "nearest" });
            this.scrollDir.restore();

          }, 1000);
          if (type == 'BUSINESS' && (groupId == null || groupId == undefined || groupId == '')) {
            //this.route.routeReuseStrategy.shouldReuseRoute = () => true;
            let d = {
              type: type,
              refererId: refererId,
              groupId: res['recipientId']
            };
            this.route.navigate(['/message'], { queryParams: d })
          }

          setTimeout(() => { this.summernote.writeValue(''); }, 100);


          this.intervalExistSeen = true;
          this.intervalNonSeenMessage = true;
        }
      }
    });
  }

  redirectUrl(item: any) {
    //"redirect user ",item );


    console.log(item)

    let tempcontact:any = this.contactList;
    this.contactList=[];

     tempcontact.forEach((e, index) => {
      if (e.groupId!=null) {
         Object.assign(tempcontact[index], e);
         this.contactList.push(e)
         this.contactList = this.sortBy(this.contactList, 'lastMessageOn');
      }
    });

    if (item['groupStatus'] == "INACTIVE") {
      Swal.fire('', 'The' + item['groupType'].toLowerCase() + 'as it has been deleted', 'error');
    } else if (item['groupId'] && item['groupId'] != null && item['groupId'] != "") {
      let m = {
        groupId: item['groupId'],
        type: item['groupType'].toUpperCase()
      };
      if (item['refererId'] && item['refererId'] != null && item['refererId'] != "")
        m['refererId'] = item['refererId'];
      m['dropdown'] = this.contactfil
      this.searchAfterKeys = null;
      this.userRedirect = m;
      // this.route.navigate(["/message"], { queryParams: m });
      this._util.startLoader('msgspinner');
      let urlTree;
      urlTree = this.route.createUrlTree([], {
        queryParams: m,
        queryParamsHandling: 'merge',
        preserveFragment: true
      });
      this._location.go(urlTree)
      this._util.stopLoader('msgspinner');

      setTimeout(() => {
        this.countAPI = item['nonSeenCount'];
        if (this.countAPI > 10) {
          this.showbottom = false;
        }
        item['nonSeenCount'] = "0";
        //this.queryParamBasedMethod();
        this.existsapicall(m);
      }, 300);
    }
  }


  existsapicall(m) {
    let groupId = m.groupId;
    let type = m.type;
    let refererId = m.refererId;
    var newRefererId;
    if (refererId == null) {
      newRefererId = groupId;
    } else if (refererId != null) {
      newRefererId = refererId
    }
    this.imageAttachmentEdit = false;
    this.uploadFiles = [];
    if (type && type != null && type != '') {
      let contact = {
        userId: localStorage.getItem('userId'),
        groupType: type.toUpperCase(),
        groupId: groupId,
        refererId: newRefererId,
        messageType: type.toUpperCase(),
      };
      this._util.startLoader('msgspinner');
      let url = "message/contact/exist";
      this.currentIndex = 0;
      this._api.messagePageService('POST', url, contact).subscribe(res => {
        this._util.stopLoader('msgspinner');

        if (res && res['code'] == '00000') {
          let d = res;
          this.sendMsgres.date = data;
          if (d['pageAdmin']) {
            this.route.navigate(['/message']);
            return;
          }
          if (d['exist']) {

            if (res.groupStatus == "INACTIVE") {
              // Swal.fire('', 'The ' +res.groupType.toLowerCase() +' has been deleted', 'error');
            }


            if ((type === 'COMMUNITY' || type === 'BUSINESS') && (groupId == undefined || groupId == null || groupId == '')) {
              let l = {
                groupId: d['groupId'],
                type: type,
                refererId: refererId
              };
              this.route.navigate(['/message'], { queryParams: l });
            }

            let index = this.contactList.findIndex((item) => item.groupId === d.groupId);
            if (index < 0) {

              this.contactList.push(d);
              var data: any = []
              data = this.duplicate(this.contactList);
              this.contactList = data;

            }
            // this.messageList = (res['messageList'] == undefined || res['messageList']) == null ? [] : res['messageList'];
            this.messageList = [];
            this.SelectedContact = res;
            if(res.status=="GROUP_INACTIVE"){
              this.SelectedContact.status = "INACTIVE";
            }


            console.log("this.SelectedContact")
            console.log(this.SelectedContact)
            this.sendMsgres.recipientId = d['groupId'];
            if (type === "BUSINESS" || type === "COMMUNITY") {
              this.SelectedContact.newstatus = this.SelectedContact.status;
              if (this.SelectedContact.status == "ACTIVE" && res.chatStatus == "ENABLED" || this.SelectedContact.status == "ACTIVE" && res.chatStatus == "NEW") {
                this.SelectedContact.status = "ACTIVE";
              } else if (this.SelectedContact.chatStatus == "DISABLED") {
                this.SelectedContact.status = "INACTIVE";
              }
            }

            this.messageStatus = MESSAGESTATUS.MESSAGE;
            this.messageListscroll(d['groupId'], this.currentIndex, this.pagination);

            if (type === 'USER') {

              this._socket.onMessage('/topic/message/' + groupId + '-' + localStorage.getItem('userId')).subscribe(res => {
                //////"USER", res)
                if (this.SelectedContact.groupId == res.authorId && type === 'USER') {
                  //" existsapicall USER message", res)

                  this.constructMsg(this, res);
                }

              });

              this._socket.onMessage('/topic/message/' + localStorage.getItem('userId') + '-' + groupId).subscribe(res => {
                //////"USER2", res)
                if (this.SelectedContact.groupId == res.authorId && type === 'USER') {
                  //" existsapicall USER message1 ", res)

                  this.constructMsg(this, res);
                }
              });

              this._socket.onMessage('/topic/event/' + localStorage.getItem('userId')).subscribe(res_evn => {
                //////"res_evn " + res_evn);
             //   console.log("res_business oneevent 1" + JSON.stringify(res_evn))

                if (type === 'USER') {
                  this.SelectedContact.status = res_evn.status;
                }

                if(res_evn.status=='GROUP_INACTIVE'){
                  this.SelectedContact.status ="INACTIVE"
                }
                // this.SelectedContact = {};
                console.log("this.SelectedContact")
                console.log(this.SelectedContact)
                // this.messageStatus = MESSAGESTATUS.EMPTY;
                // const index = this.contactList.findIndex(x => x.groupId === res_evn.groupId);
                // if (index !== undefined) this.contactList.splice(index, 1);
              });

            } else if (type === 'GROUP' || type === 'NETWORK' || type === 'TEAM') {
              this._socket.onMessage('/topic/message/' + groupId).subscribe(res => {


                if (type === 'GROUP' || type === 'NETWORK' || type === 'TEAM') {

                  //  //////"GROUP1  groupIdgroupId", groupId)
                  //////"GROUP1  exists", res)
                  //////"STATUS",this.SelectedContact.status)
                  // if (res.eventType == "ACTION") {
                  //   var dates = new Date(res.sentDate);
                  //   let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');
                  //   res.oldMessage = res.message + " on " + latest_date;
                  // }

                  if (res.eventType == "ACTION") {
                    var dates = new Date(res.sentDate);
                    let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');

                    var tempMsg: any = [];
                    var secondTemMsg: any = [];
                    if (res.actionType == "ADDED_TO_NETWORK") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                    }
                    else if (res.actionType == "REMOVED_FROM_NETWORK") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "LEFT_NETWORK") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " left " + " on " + latest_date;
                    } else if (res.actionType == "ADDED_TO_TEAM") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " joined  " + " on " + latest_date;
                    } else if (res.actionType == "REMOVED_FROM_TEAM") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "LEFT_TEAM") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " left " + " on " + latest_date;
                    } else if (res.actionType == "ADDED_TO_MSG_GRP") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " added " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "REMOVED_FROM_MSG_GRP") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "LEFT_FROM_MSG_GRP") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " left " + " on " + latest_date;
                    } else if (res.actionType == "ENABLED_RIGHTS") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " enabled chat rights for " + secondTemMsg + " on " + latest_date;
                    } else if (res.actionType == "DISABLED_RIGHTS") {
                      if (res.authorId == this.userId) {
                        tempMsg = " You "
                      } else {
                        tempMsg = res.authorName;
                      }
                      if (res.recipientUserId == this.userId) {
                        secondTemMsg = " You "
                      } else {
                        secondTemMsg = res.recipientName;
                      }
                      res.oldMessage = tempMsg + " disabled  chat rights for " + secondTemMsg + " on " + latest_date;
                    }
                    else if (this.SelectedContact.groupType == "NETWORK" && res.actionType == "DEACTIVATED") {
                      res.oldMessage = res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                    }

                    else if (this.SelectedContact.groupType == "TEAM" && res.actionType == "DEACTIVATED") {
                      res.oldMessage =  res.oldMessage =res.message+" on " + latest_date + " No further communication is possible.";
                    }

                    else if (this.SelectedContact.groupType == "BUSINESS" && res.actionType == "DEACTIVATED") {
                      res.oldMessage =  res.oldMessage =res.message+" on " + latest_date + " No further communication is possible.";
                    }

                    else if (this.SelectedContact.groupType == "COMMUNITY" && res.actionType == "DEACTIVATED") {
                      res.oldMessage =  res.oldMessage =res.message+" on " + latest_date + " No further communication is possible.";
                    }

                    else {
                      res.oldMessage = res.message + " on " + latest_date;

                    }
                  }


                  // this.contactList.forEach((e, index) => {

                  if (res.recipientId === this.SelectedContact.groupId) {
                    // Object.assign(this.contactList[index], e);
                    this.contactList = this.sortBy(this.contactList, 'lastMessageOn');

                    if (this.SelectedContact.status == 'ACTIVE') {
                      //" existsapicall GROUP message1 ", res)

                      this.constructMsg(this, res);


                    }

                  }
                  // });


                }
              });

              this._socket.onMessage('/topic/event/' + localStorage.getItem('userId')).subscribe(res_evn => {

               // console.log("res_business NETWORK " +  JSON.stringify(res_evn))


                if (type === 'GROUP' || type === 'NETWORK' || type === 'TEAM') {

                  //////"GROUP2  exists", res)
                  this.SelectedContact.status = res_evn.status;
                  if(res_evn.status=='GROUP_INACTIVE'){
                    this.SelectedContact.status ="INACTIVE"
                  }

                  this.tpoicData = res_evn;
                  //////'topic/event', res_evn);
                  // const index = this.contactList.findIndex(x => x.groupId === res_evn.groupId);
                  // if (index !== undefined) this.contactList.splice(index, 1);
                  //
                  // this.messageStatus = MESSAGESTATUS.EMPTY;
                  if (this.SelectedContact.groupId == res_evn.groupId) {
                    if (res_evn.groupStatus == 'REVOKED') {
                      // Swal.fire(res_evn.groupOwner + ' removed you from ' + res_evn.groupName);
                    } else if (res_evn.groupStatus == 'INACTIVE') {
                      Swal.fire(res_evn.groupName + ' group has been deleted');
                    }
                    // this.SelectedContact = {};
                    console.log("this.SelectedContact")
                    console.log(this.SelectedContact)
                  }

                }
              });

            } else if (type === 'BUSINESS' || type === 'COMMUNITY') {

              if (groupId != undefined && groupId != null && groupId != "") {
                this._socket.onMessage('/topic/message/' + groupId).subscribe(res => {
                  //"USER BUSINESS message", res)
                  if (type === 'BUSINESS' || type === 'COMMUNITY') {

                    if (res.recipientId == this.SelectedContact.groupId) {
                      // if (res.eventType == "ACTION") {
                      //   var dates = new Date(res.sentDate);
                      //   let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');
                      //   res.oldMessage = res.message + " on " + latest_date;
                      // }

                      if (res.eventType == "ACTION") {
                        var dates = new Date(res.sentDate);
                        let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');

                        var tempMsg: any = [];
                        var secondTemMsg: any = [];
                        if (res.actionType == "ADDED_TO_NETWORK") {
                          if (res.authorId == this.userId) {
                            tempMsg = " You "
                          } else {
                            tempMsg = res.authorName;
                          }
                          if (res.recipientUserId == this.userId) {
                            secondTemMsg = " You "
                          } else {
                            secondTemMsg = res.recipientName;
                          }
                          res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                        }
                        else if (res.actionType == "REMOVED_FROM_NETWORK") {
                          if (res.authorId == this.userId) {
                            tempMsg = " You "
                          } else {
                            tempMsg = res.authorName;
                          }
                          if (res.recipientUserId == this.userId) {
                            secondTemMsg = " You "
                          } else {
                            secondTemMsg = res.recipientName;
                          }
                          res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                        } else if (res.actionType == "LEFT_NETWORK") {
                          if (res.authorId == this.userId) {
                            tempMsg = " You "
                          } else {
                            tempMsg = res.authorName;
                          }
                          if (res.recipientUserId == this.userId) {
                            secondTemMsg = " You "
                          } else {
                            secondTemMsg = res.recipientName;
                          }
                          res.oldMessage = tempMsg + " left " + " on " + latest_date;
                        } else if (res.actionType == "ADDED_TO_TEAM") {
                          if (res.authorId == this.userId) {
                            tempMsg = " You "
                          } else {
                            tempMsg = res.authorName;
                          }
                          if (res.recipientUserId == this.userId) {
                            secondTemMsg = " You "
                          } else {
                            secondTemMsg = res.recipientName;
                          }
                          res.oldMessage = tempMsg + " joined  " + " on " + latest_date;
                        } else if (res.actionType == "REMOVED_FROM_TEAM") {
                          if (res.authorId == this.userId) {
                            tempMsg = " You "
                          } else {
                            tempMsg = res.authorName;
                          }
                          if (res.recipientUserId == this.userId) {
                            secondTemMsg = " You "
                          } else {
                            secondTemMsg = res.recipientName;
                          }
                          res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                        } else if (res.actionType == "LEFT_TEAM") {
                          if (res.authorId == this.userId) {
                            tempMsg = " You "
                          } else {
                            tempMsg = res.authorName;
                          }
                          if (res.recipientUserId == this.userId) {
                            secondTemMsg = " You "
                          } else {
                            secondTemMsg = res.recipientName;
                          }
                          res.oldMessage = tempMsg + " left " + " on " + latest_date;
                        } else if (res.actionType == "ADDED_TO_MSG_GRP") {
                          if (res.authorId == this.userId) {
                            tempMsg = " You "
                          } else {
                            tempMsg = res.authorName;
                          }
                          if (res.recipientUserId == this.userId) {
                            secondTemMsg = " You "
                          } else {
                            secondTemMsg = res.recipientName;
                          }
                          res.oldMessage = tempMsg + " added " + secondTemMsg + " on " + latest_date;
                        } else if (res.actionType == "REMOVED_FROM_MSG_GRP") {
                          if (res.authorId == this.userId) {
                            tempMsg = " You "
                          } else {
                            tempMsg = res.authorName;
                          }
                          if (res.recipientUserId == this.userId) {
                            secondTemMsg = " You "
                          } else {
                            secondTemMsg = res.recipientName;
                          }
                          res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                        } else if (res.actionType == "LEFT_FROM_MSG_GRP") {
                          if (res.authorId == this.userId) {
                            tempMsg = " You "
                          } else {
                            tempMsg = res.authorName;
                          }
                          if (res.recipientUserId == this.userId) {
                            secondTemMsg = " You "
                          } else {
                            secondTemMsg = res.recipientName;
                          }
                          res.oldMessage = tempMsg + " left " + " on " + latest_date;
                        } else if (res.actionType == "ENABLED_RIGHTS") {
                          if (res.authorId == this.userId) {
                            tempMsg = " You "
                          } else {
                            tempMsg = res.authorName;
                          }
                          if (res.recipientUserId == this.userId) {
                            secondTemMsg = " You "
                          } else {
                            secondTemMsg = res.recipientName;
                          }
                          res.oldMessage = tempMsg + " enabled chat rights for " + secondTemMsg + " on " + latest_date;
                        } else if (res.actionType == "DISABLED_RIGHTS") {
                          if (res.authorId == this.userId) {
                            tempMsg = " You "
                          } else {
                            tempMsg = res.authorName;
                          }
                          if (res.recipientUserId == this.userId) {
                            secondTemMsg = " You "
                          } else {
                            secondTemMsg = res.recipientName;
                          }
                          res.oldMessage = tempMsg + " disabled  chat rights for " + secondTemMsg + " on " + latest_date;
                        }

                        else if (this.SelectedContact.groupType == "NETWORK" && res.actionType == "DEACTIVATED") {
                          res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                        }

                        else if (this.SelectedContact.groupType == "TEAM" && res.actionType == "DEACTIVATED") {
                          res.oldMessage = res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                        }

                        else if (this.SelectedContact.groupType == "BUSINESS" && res.actionType == "DEACTIVATED") {
                          res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                        }

                        else if (this.SelectedContact.groupType == "COMMUNITY" && res.actionType == "DEACTIVATED") {
                          res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                        }

                        else {
                          res.oldMessage = res.message + " on " + latest_date;

                        }
                      }

                      //" existsapicall BUSINESS message1 ", res)

                      this.constructMsg(this, res);

                    }
                  }
                });
              } else {
                this._socket.onMessage('/topic/message/' + refererId).subscribe(res => {
                  //"USER BUSINESS Message2", res)
                  if (type === 'BUSINESS' || type === 'COMMUNITY') {
                    // if (res.eventType == "ACTION") {
                    //   var dates = new Date(res.sentDate);
                    //   let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');
                    //   res.oldMessage = res.message + " on " + latest_date;
                    // }

                    if (res.eventType == "ACTION") {
                      var dates = new Date(res.sentDate);
                      let latest_date = this.datepipe.transform(dates, 'EEE, MMM dd yy h:mm:ss a');

                      var tempMsg: any = [];
                      var secondTemMsg: any = [];
                      if (res.actionType == "ADDED_TO_NETWORK") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                      }
                      else if (res.actionType == "REMOVED_FROM_NETWORK") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                      } else if (res.actionType == "LEFT_NETWORK") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " left" + secondTemMsg + " on " + latest_date;
                      } else if (res.actionType == "ADDED_TO_TEAM") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " joined " + " on " + latest_date;
                      } else if (res.actionType == "REMOVED_FROM_TEAM") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                      } else if (res.actionType == "LEFT_TEAM") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " left " + " on " + latest_date;
                      } else if (res.actionType == "ADDED_TO_MSG_GRP") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " added " + secondTemMsg + " on " + latest_date;
                      } else if (res.actionType == "REMOVED_FROM_MSG_GRP") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " removed " + secondTemMsg + " on " + latest_date;
                      } else if (res.actionType == "LEFT_FROM_MSG_GRP") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " left " + " on " + latest_date;
                      } else if (res.actionType == "ENABLED_RIGHTS") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " enabled chat rights for " + secondTemMsg + " on " + latest_date;
                      } else if (res.actionType == "DISABLED_RIGHTS") {
                        if (res.authorId == this.userId) {
                          tempMsg = " You "
                        } else {
                          tempMsg = res.authorName;
                        }
                        if (res.recipientUserId == this.userId) {
                          secondTemMsg = " You "
                        } else {
                          secondTemMsg = res.recipientName;
                        }
                        res.oldMessage = tempMsg + " disabled  chat rights for " + secondTemMsg + " on " + latest_date;
                      }

                      else if (this.SelectedContact.groupType == "NETWORK" && res.actionType == "DEACTIVATED") {
                        res.oldMessage = res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                      }

                      else if (this.SelectedContact.groupType == "TEAM" && res.actionType == "DEACTIVATED") {
                        res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                      }

                      else if (this.SelectedContact.groupType == "BUSINESS" && res.actionType == "DEACTIVATED") {
                        res.oldMessage =  res.oldMessage =res.message+" on "  + latest_date + " No further communication is possible.";
                      }

                      else if (this.SelectedContact.groupType == "COMMUNITY" && res.actionType == "DEACTIVATED") {
                        res.oldMessage =  res.oldMessage =res.message+" on " + latest_date + " No further communication is possible.";
                      }

                      else {
                        res.oldMessage = res.message + " on " + latest_date;

                      }
                    }

                    if (res.recipientId == this.SelectedContact.groupId) {
                      //" existsapicall BUSINESS message1 recipientId ", res)

                      this.constructMsg(this, res);
                    }
                  }
                });
              }

              this._socket.onMessage('/topic/event/' + localStorage.getItem('userId')).subscribe(res_evn => {
                //"res_business evnt " + JSON.stringify(res_evn))
            //    console.log("res_business BUSINESS " + JSON.stringify(res_evn))

                if (type === 'BUSINESS' || type === 'COMMUNITY') {
                  if (res_evn.status == "ACTIVE") {
                    if (res_evn.chatStatus == "ENABLED" ) {
                      this.SelectedContact.status = "ACTIVE";
                    } else if (res_evn.chatStatus == "DISABLED") {
                      this.SelectedContact.status = "INACTIVE";
                    }
                  } else if (res_evn.status == "INACTIVE" || res_evn.status=="GROUP_INACTIVE") {
                    this.SelectedContact.status = "INACTIVE";
                  }
                }
                // const index = this.contactList.findIndex(x => x.groupId === res_evn.groupId);
                // if (index !== undefined) this.contactList.splice(index, 1);
              });

            }

          } else {
            this.messageList = [];
            this.SelectedContact = res;
            console.log("this.SelectedContact")
            console.log(this.SelectedContact)
            this.messageStatus = MESSAGESTATUS.MESSAGE;

            if ((type === 'COMMUNITY' || type === 'BUSINESS') && (groupId == undefined || groupId == null || groupId == '')) {
              let l = {
                groupId: d['groupId'],
                type: type,
                refererId: refererId
              };
              this.route.navigate(['/message'], { queryParams: l });
            }

          }
        }





      })


    }


  }

  singleRedirectUrl(item: any) {



    let tempcontact:any = this.contactList;
    this.contactList=[];

     tempcontact.forEach((e, index) => {
      if (e.groupId!=null) {
          Object.assign(tempcontact[index], e);
         this.contactList.push(e)
         this.contactList = this.sortBy(this.contactList, 'lastMessageOn');
      }
    });

    let type = "USER"
    this.contactfil = type;
    let m = {
      groupId: item['groupId'],
      type: 'USER',
      userId: localStorage.getItem('userId'),
      refererId: null,
      dropdown: this.contactfil
    };

    this.userRedirect.groupId = item['groupId'];
    this.userRedirect.type = 'USER',
      this.searchAfterKeys = null;

    let urlTree;
    urlTree = this.route.createUrlTree([], {
      queryParams: m,
      queryParamsHandling: 'merge',
      preserveFragment: true
    });
    this._location.go(urlTree)
    this._util.stopLoader('msgspinner');

    this.countAPI = item['nonSeenCount'];
    if (this.countAPI > 10) {
      this.showbottom = false;
    }


    setTimeout(() => {
      // this.messageStatus = MESSAGESTATUS.MESSAGE;
      this.existsapicall(m)
    }, 300);
    this.modalRef.hide();
  }

  addUserToGroup(event: any, userId: any, item) {
    if (event.target.checked) {
      item.checked = true
      this.groupData.contacts.push(item.groupId);
      this.groupData.name.push(item.groupName);

    } else {
      item.checked = false
      for (var i = 0; i < this.groupData.contacts.length; i++) {
        if (!item.checked && this.groupData.contacts[i] == item.groupId) {
          this.groupData.contacts.splice(i, 1);
          this.groupData.name.splice(i, 1);
          if (this.addusers.length != 0) {
            this.addusers.splice(i, 1);

          }
        }
      }
    }
  }

  openNewContactModal(template?: TemplateRef<any>) {
    this.getNewContact(true, template);
  }

  closeNewContactModal() {
    this.page = 1;
    this.modalRef.hide();
    this.groupData = {
      groupName: null,
      contacts: [],
      name: []
    };
    this.paginationFlag = true;
  }

  openGroupContactModal(template?: TemplateRef<any>) {
    this.getNewContact(true, template);
  }

  createGroup() {
    var name = this.groupData.groupName;
    //////name)
    if (name != null) {
      var name = this.groupData.groupName.trim();
    }

    if (name == null || name == '') {
      // Swal.fire('', 'Enter group name', 'error');
      var str = this.groupData.name.toString();
      this.groupData.groupName = str;
      this.groupData.isAutoGeneratedGroupName = true;
      // return;
    } else {
      this.groupData.isAutoGeneratedGroupName = false;
    }


    if (this.groupData.contacts == null || this.groupData.contacts.length == 0
      || this.groupData.contacts.length == 1) {
      this.groupData.groupName = ""
      Swal.fire('', 'Please add one more user into the group', 'error');
      return;
    }
    let userId = localStorage.getItem("userId");
    this.groupData['createdBy'] = userId;
    this.groupData['groupType'] = 'GROUP';
    this.groupData.contacts.push(userId);
    const url = 'message/group';
    this._util.startLoader('msgspinner');
    this._api.messagePageService('POST', url, this.groupData).subscribe(res => {
      this._util.stopLoader('msgspinner');

      if (res && res != null && res != '' && res.code == "00000") {
        // let type = this.aroute.snapshot.queryParamMap.get('dropdown');
        let type = this.contactfil
        if (type == "" && type == undefined && type == null) {
          type = "All"
        }
        this.contactfil = type;
        let d = {
          groupId: res['groupId'],
          type: 'GROUP',
          dropdown: this.contactfil
        };
        //this.messageStatus = MESSAGESTATUS.MESSAGE;
        this.route.navigate(['/message'], { queryParams: d });
        this.groupData.groupName = ""
        this.modalRef.hide();
        this.groupData = {
          groupName: null,
          contacts: [],
          name: []
        };
      } else if (res.code == "99998") {
        Swal.fire({
          position: "center",
          icon: "error",
          title: "Group already exists!, Please try different name",
          showConfirmButton: false,
          timer: 2500,
        });
        this.groupData.groupName = ""
        this.groupData.contacts.pop();
      }
    }, err => {
      this._util.stopLoader();
    });
  }

  sortBy(list: Array<any>, prop: string) {
    if (list != null && list.length > 0) {
      return list.sort((a, b) => {
        if (a.lastMessageOn == "null") {
          a[prop] = new Date();
          return <any>new Date(b[prop]) - <any>new Date(a[prop]);
        } else {
          return <any>new Date(b[prop]) - <any>new Date(a[prop]);
        }
      });
    }
  }

  sortByMsg(list: Array<any>, prop: string) {
    if (list != null && list.length > 0) {
      return list.sort((a, b) => {
        return <any>new Date(a[prop]) - <any>new Date(b[prop]);
      });
    }
  }

  onScrollDown() {

  }

  onScrollUp() {

    this.currentIndex = this.currentIndex + 1;
    //////this.currentIndex);
    this.messageListscroll(null, this.currentIndex, this.pagination);
    //   el.scrollIntoView(true);

    this.showbottom = true;




  }

  showImageAndVideoPreview(item: any, i: any) {
    document.getElementById('myModal').style.display = 'block';
    this.fancyList = item['attachments'];
    setTimeout(() => {
      this.showSlides(i + 1);
    }, 100);
  }
  closeFancyModal() {
    let slides = document.getElementsByClassName("mySlidess");
    for (let i = 0; i < slides.length; i++) {
      slides[i]['style'].display = "none";
    }
    document.getElementById("myModal").style.display = "none";
    this.slideIndex = 1;
  }

  plusSlides(n) {
    this.showSlides(this.slideIndex += n);
  }

  currentSlide(n) {
    this.showSlides(this.slideIndex = n);
  }
  showSlides(n) {
    this.slideIndex = n;
    let slides = document.getElementsByClassName("mySlidess");
    if (n > slides.length) { this.slideIndex = 1; }
    if (n < 1) { this.slideIndex = slides.length; }
    for (let i = 0; i < slides.length; i++) {
      slides[i]['style'].display = "none";
    }
    slides[this.slideIndex - 1]['style'].display = "block";
  }

  getSearchMessageDetails(item: any) {
    this.searchData = {};
    this.searchTerm = "";
    setTimeout(() => {
      const id = item['messageId'];
      const element = document.getElementById(id);
      element.scrollIntoView({ behavior: "smooth", block: "end", inline: "nearest" });
      this.scrollDir.restore();
      element.style.backgroundColor = "#ADD8E6";
      setTimeout(function () {
        element.style.backgroundColor = ""
      }, 2000);
    }, 100);
  }

  onSearchChange(evnet: any) { }

  closeOpenedMsg() {
    this.route.navigate(['/message']);
    this.SelectedContact = {};
    console.log("this.SelectedContact")
    console.log(this.SelectedContact)
    this.messageStatus = MESSAGESTATUS.EMPTY;
  }

  fileUpload(event: any, template?: any, option?: any) {

    if (this.uploadFiles.length == 0) {
      this.editValueEditImage['attachment'] = false;
    }


    if (option && option === 'update') {


    } else {
      this.FormData = new FormData();
    }
    if (event.target.files && event.target.files[0]) {
      const filesAmount = event.target.files.length;
      for (let i = 0; i < filesAmount; i++) {
        const reader = new FileReader();
        reader.onload = (event1: any) => {
          const type = event.target.files[i].type;
          let type1 = 'image';
          if (type.includes('image')) {
            type1 = 'image';
          } else if (type.includes('video')) {
            type1 = 'video';
          } else if (type.includes('application')) {
            type1 = 'application';
          } else if (type.includes('audio')) {
            type1 = 'audio';
          } else {
            type1 = 'others';
          }
          const data = {
            t: type1,
            name: event.target.files[i].name,
            ft: type,
            src: event1.target.result,
            file: event.target.files[i]
          };
          this.uploadFiles.push(data);

          if (this.editMessage) {
            this.imageAttachmentEdit = true;
            this.editMessage = false;
            this.editValueEditImage['attachment'] = true;
          }
          let tempdata = this.duplicateimag(this.uploadFiles);
          this.uploadFiles = tempdata;

        };
        reader.readAsDataURL(event.target.files[i]);


        if (option == "update") {
          // this.FormData.getAll("file").forEach(element => {
          //    //////"values "+element  )
          //   if (element.name != event.target.files[i].name) {
          //     this.FormData.append('file', event.target.files[i]);
          //    }
          // });
        } else if (option == "fileupload") {
          // this.FormData.append('file', event.target.files[i]);
        }

        if (!this.attachment) {
          if (!this.imageAttachmentEdit) {
            this.attachment = true;

            // setTimeout(() => { this.summernote.writeValue(''); }, 100);
          }

        }
      }
    }
  }

  duplicateimag(data) {
    var temp = [];
    var arr = data.filter(function (e) {
      // If it is not a duplicate, return true
      if (temp.indexOf(e.name) == -1) {
        temp.push(e.name);
        return true;
      }
      return false;
    });
    return arr;
  }
  toggleVideo(event?: any) {
    this.videoplayer.nativeElement.play();
  }

  removeAttachMent(item: any, i: any) {
    this.uploadFiles.splice(i, 1);
    //this.uploadFiles);
    if (this.uploadFiles.length === 0) {
      this.attachment = false;
    }
  }

  removeAttachMentedit(item: any, i: any) {
    //item.attachmentId)
    //this.editValue.attachments)

    if (this.editValue.attachments != null && this.editValue.attachments.length != 0) {
      this.editValue.attachments.forEach(ele => {
        //ele.attachmentId==item.attachmentId)
        if (ele.status == "ACTIVE" && ele.attachmentId == item.attachmentId) {
          ele.deleted = true;
          this.removeElement.push(ele);
        }

      });
    }

    //this.removeElement);
    this.uploadFiles.splice(i, 1);
    //this.uploadFiles);
    if (this.uploadFiles.length === 0) {
      this.attachment = false;
    }


  }

  pagecount(event) {
    this.configlist.currentPage = event;
    this.page = event;
    this.newpage = event;
  }


  listofUsers(templates?: TemplateRef<any>) {

    //"listofUsers test" ,this.SelectedContact.members);
    this.SelectedContact.members;
    this.modalRef.hide();
    this.modalRefAddgroup.hide();
    this.groupUserList = this.SelectedContact.members;
    this.modalRef = this.modalService.show(templates, Object.assign({}, { class: 'group-msg-modal modal-md' }));


  }
}
