import { Component, Input, OnInit } from "@angular/core";
import { Router } from "@angular/router";
import { Subscription } from "rxjs";
import { TeamComponent } from "src/app/page/homepage/team/team.component";
import { ApiService } from "src/app/services/api.service";
import { AppSettings } from "src/app/services/AppSettings";
import { SearchData } from "src/app/services/searchData";
import { UtilService } from "src/app/services/util.service";
import { NetworkUser } from "src/app/types/NetworkUser";
import { TeamUser } from "src/app/types/TeamUser";
import Swal from "sweetalert2";

@Component({
  selector: "app-teamcard",
  templateUrl: "./teamcard.component.html",
  styleUrls: ["./teamcard.component.scss"],
})
export class TeamcardComponent implements OnInit {
  @Input()
  userDataInput: TeamUser;
  userId: any = localStorage.getItem("userId");
  // commonVariableEventEmitter: Subscription;
  acceptRejectBtn;
  constructor(
    private router: Router,
    private api: ApiService,
    private util: UtilService,
    private searchData: SearchData,
    private tmCls: TeamComponent // private searchData: SearchData
  ) {

  }

  ngOnInit() {
    this.acceptRejectBtn = localStorage.getItem("acceptRejectBtn");
    if (this.userDataInput.members) {
      this.userDataInput.members.forEach((element) => {
        if (element.photo != null) {
          element.image =""
          element.image = AppSettings.photoUrl + element.photo;
         } else {
          element.image=""
          element.image = "assets/images/userAvatar.png";
        }
      });
    }
    this.acceptRejectBtn = localStorage.getItem("acceptRejectBtn");
  }
  close() {}

  reject(dataInput) {
    // {
    //   "memberUserId"	:"374205224040898200511",
    //   "teamId"	:"8b155958-c0ef-482f-bc8e-ca1d5d6de2c1",
    //   "status" : ""
    // }

    var usId = localStorage.getItem("userId");

    var obj: any = {};
    // obj.teamMemberId = usId;
    // obj.teamMemberId = usId;
    obj.memberUserId = usId;
    obj.teamId = dataInput.teamId;
    obj.status = "REJECT";
    this.util.startLoader();
    this.api.create("teams/accept", obj).subscribe((res) => {
    this.util.stopLoader();

      if (res.code == "00000") {
        Swal.fire({
          position: "center",
          icon: "success",
          title: "Invitation rejected",
          showConfirmButton: false,
          timer: 1500,
        });
        this.tmCls.filterApi(undefined);
      }
    },err => {
      this.util.stopLoader();

     });
  }

  mgsBtn(values) {
    const datas: any = {};
    // datas.groupId = this.pathdata.teamId;
    datas.refererId = values.teamId;
    datas.teamId = values.teamId;

    datas.type = "TEAM";
    this.api
      .query("message?type=TEAM&groupId" + datas.groupId)
      .subscribe((res) => {
        // console.log('Message data :', res)
        this.router.navigate(["message"], { queryParams: datas });
      },err => {
        this.util.stopLoader();
      });
  }

  deleteTeam(values, param) {

     if(param == 'delete'){
      const swalWithBootstrapButtons = Swal.mixin({
        customClass: {
          confirmButton: "btn btn-success",
          cancelButton: "btn btn-danger",
        },
        buttonsStyling: false,
      });

      swalWithBootstrapButtons
        .fire({
          title: "Are you sure you want to deactivate?",
          text: "You will still be able to retrieve the team after deactivation, if you change your mind.",
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "Yes",
          cancelButtonText: "No",
          reverseButtons: true,
        })
        .then((result) => {
          if (result.isConfirmed) {
            this.util.startLoader()
            this.api
              .delete("teams/delete/" + values.teamId)
              .subscribe((res) => {
                if (res.code === "00000") {
                  this.util.stopLoader()
                  Swal.fire({
                    position: "center",
                    icon: "success",
                    title: "Team deactivated successfully.",
                    // showConfirmButton: true,
                    showConfirmButton: false,
                    timer: 1500,
                  }).then(()=>{
                      var values: any = {}
                      values.boolean = true
                      this.searchData.setBooleanValue(values)
                  });
                  // this.ngOnInit();
                }else{
                  this.util.stopLoader()
                  Swal.fire({
                    position: "center",
                    icon: "info",
                    title: "Oops..",
                    text: "Something went wrong. Please, try again later.",
                    showConfirmButton: false,
                     timer: 1500,
                  })
                }
              },err => {
                this.util.stopLoader();
              });
          } else if (result.dismiss === Swal.DismissReason.cancel) {
          }
        });
     } else if(param == 'leave'){
      const swalWithBootstrapButtons = Swal.mixin({
        customClass: {
          confirmButton: "btn btn-success",
          cancelButton: "btn btn-danger",
        },
        buttonsStyling: false,
      });

      swalWithBootstrapButtons
        .fire({
          title: "Are you sure you want to leave?",
          text: "You can only come back to the team if the admin sends you a join invitation.",
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "Yes",
          cancelButtonText: "No",
          reverseButtons: true,
        })
        .then((result) => {
          if (result.isConfirmed) {
            this.util.startLoader()
            this.api
              .delete("teams/delete/member?userId=" +
              localStorage.getItem("userId") +"&type=LEFT"+
              "&teamId=" +
              values.teamId)
              .subscribe((res) => {
                if (res.code === "00000") {
                  this.router.navigate(["landingPage/team"]);

                  Swal.fire({
                    position: "center",
                    icon: "success",
                    title: "You have left the Team successfully",
                    // showConfirmButton: true,
                    showConfirmButton: false,
                    timer: 1500,
                  }).then(()=>{
                    var values: any = {}
                    values.boolean = true
                    this.searchData.setBooleanValue(values)
                });
                  // this.ngOnInit();
                }
              },err => {
                this.util.stopLoader();
              });
          } else if (result.dismiss === Swal.DismissReason.cancel) {
          }
        });
     }

  }

  activateTeam(data){
    this.util.startLoader()
    let teamId = data.teamId;
    this.api
      .create("teams/activate/" + teamId, null)
      .subscribe((res) => {
        if (res.code === "00000") {
          // this.onUnfollow.emit(this.BusinessDataInput);
          // this.router.navigate(["landingPage/business"]);
          Swal.fire({
            position: "center",
            icon: "success",
            title: "Team has been activated.",
            showConfirmButton: false,
             timer: 1500,
          }).then(()=>{
            var values: any = {}
            values.boolean = true
            this.searchData.setBooleanValue(values)
          });
        }else{
          this.util.stopLoader()
          Swal.fire({
            position: "center",
            icon: "info",
            title: "Oops..",
            text: "Something went wrong. Please, try again later.",
            showConfirmButton: false,
             timer: 1500,
          })
        }
      },err => {
        this.util.stopLoader();
      });
  }


  accept(dataInput) {
    var usId = localStorage.getItem("userId");

    var obj: any = {};
    obj.memberUserId = usId;
    obj.teamId = dataInput.teamId;
    obj.status = "ACCEPT";
      this.util.startLoader();
      this.api.create("teams/accept", obj).subscribe((res) => {
        if (res.code == "00000") {
        this.util.stopLoader();
        Swal.fire({
          position: "center",
          icon: "success",
          title: "You've been added to " + dataInput.teamName,
          showConfirmButton: false,
          timer: 3000,
        }).then(()=>{
          var values: any = {}
          values.boolean = true
          this.searchData.setBooleanValue(values)
        });
        // this.tmCls.filterApi("invites_received");
      }else{
        this.util.stopLoader()
        Swal.fire({
          position: "center",
          icon: "info",
          title: "Oops..",
          text: "Something went wrong. Please, try again later.",
          showConfirmButton: false,
           timer: 1500,
        })
      }
    },err => {
      this.util.stopLoader();

     });
  }

  visitTeam(data) {
    if (this.acceptRejectBtn == "false" && data.status!='RequestsReceived' && data.status!='INACTIVE') {
      localStorage.setItem("teamId", data.teamId);
       data.menu="home";
      data.master="TEAM";
      this.router.navigate(["teamPage/home"], { queryParams: data });
    }
  }

  redirectPage(data){
    if(data.status!="INACTIVE"){
      this.router.navigate(['teamPage/members'], { queryParams: data })
    }
  }

}
